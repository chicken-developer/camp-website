{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useRef, useState } from 'react';\nimport { useLayoutEffect } from '../utils/use-layout-effect';\nimport { useUniqueId } from '../utils/use-unique-id';\nvar StaggeredEntranceContext =\n/*#__PURE__*/\ncreateContext(function () {\n  return {\n    isReady: true,\n    delay: 0,\n    ref: function ref() {}\n  };\n});\nexport var useStaggeredEntrance = function useStaggeredEntrance() {\n  var indentifier = useUniqueId();\n  var context = useContext(StaggeredEntranceContext);\n  return context(indentifier);\n};\n/**\n * For a list of elements that need to animate in,\n * this should be used in conjunction with entering components.\n * This does not need Javascript to execute so it will run immediately for any SSR rendered React apps before the JS has executed.\n *\n * Will dynamically add delay to each child entering component.\n * Unfortunately all entering components _NEED_ to be a direct descendant.\n */\n\nvar StaggeredEntrance = function StaggeredEntrance(_ref) {\n  var children = _ref.children,\n      column = _ref.column,\n      _ref$columns = _ref.columns,\n      columns = _ref$columns === void 0 ? 'responsive' : _ref$columns,\n      _ref$delayStep = _ref.delayStep,\n      delayStep = _ref$delayStep === void 0 ? 50 : _ref$delayStep;\n  var elementRefs = useRef([]);\n  var indexes = [];\n\n  var _useState = useState(function () {\n    if (typeof columns === 'number') {\n      // A hardcoded columns is set so bail out and set it to that!\n      return columns;\n    }\n\n    if (typeof column === 'number') {\n      // A hardcoded column is set so we will set actualColumns to be 1.\n      return 1;\n    } // We are in \"responsive\" mode.\n    // So we will be calculating when the Javascript executes on the client how many columns there will be.\n    // We are in \"responsive\" mode.\n    // So we will be calculating when the Javascript executes on the client how many columns there will be.\n\n\n    return 0;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      actualColumns = _useState2[0],\n      setActualColumns = _useState2[1];\n\n  useLayoutEffect(function () {\n    // We want to only run this code when we are in \"responsive\" mode.\n    // It is assumed we are in responsive mode if `columns` is \"responsive\",\n    // we have children element refs ready to be read (i.e. if there are no children this won't run as well)\n    // and finally that `actualColumns` is `0` - this is because for the first render cycle `actualColumns` will be `0` (set above)\n    // and then after this layout effect runs the value for `actualColumns` will then be calculated and set.\n    if (columns === 'responsive' && elementRefs.current.length && actualColumns === 0) {\n      var currentTop = 0;\n      var numberColumns = 0;\n\n      if (elementRefs.current.length <= 1) {\n        setActualColumns(1);\n        return;\n      } // We set the current top to the first elements.\n      // We will be comparing this and incrementing the column count\n      // until we hit an element that has a different offset top (or we run out of elements).\n\n\n      currentTop = elementRefs.current[0] ? elementRefs.current[0].offsetTop : 0;\n\n      for (var i = 0; i < elementRefs.current.length; i++) {\n        var child = elementRefs.current[i];\n\n        if (!child) {\n          break;\n        }\n\n        if (currentTop === child.offsetTop) {\n          numberColumns += 1;\n\n          if (elementRefs.current.length - 1 === i) {\n            setActualColumns(numberColumns);\n          }\n\n          continue;\n        }\n\n        setActualColumns(numberColumns);\n        break;\n      }\n    } // We only want this effect to run once - on initial mount.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return (\n    /*#__PURE__*/\n    React.createElement(StaggeredEntranceContext.Provider, {\n      value: function value(id) {\n        if (!indexes.includes(id)) {\n          indexes.push(id);\n        }\n\n        var isReady = actualColumns > 0;\n        var index = indexes.indexOf(id);\n        var currentColumn = column || index % actualColumns;\n        var currentRow = Math.floor(index / actualColumns);\n        var distanceFromTopLeftElement = currentRow + currentColumn; // We don't want loads of elements to have the same staggered delay as it ends up looking slow for users.\n        // To get around that we calculate the logarithm using `distanceFromTopLeftElement` which ends making\n        // elements appear faster the further away from the top left element.\n\n        var delay = Math.ceil(Math.log(distanceFromTopLeftElement + 1) * delayStep * 1.5) || 0;\n        return {\n          delay: delay,\n          isReady: isReady,\n          ref: function ref(element) {\n            return elementRefs.current[index] = element;\n          }\n        };\n      }\n    }, children)\n  );\n};\n\nexport default StaggeredEntrance;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n/** @jsx jsx */\n\nimport React, { forwardRef, useEffect, useRef, useState } from 'react';\nimport { jsx } from '@emotion/core';\nimport rafSchedule from 'raf-schd';\nimport mergeRefs from '@atlaskit/ds-lib/merge-refs';\nimport useLazyCallback from '@atlaskit/ds-lib/use-lazy-callback';\nimport useStateRef from '@atlaskit/ds-lib/use-state-ref';\nimport { keylineHeight } from '../constants';\nimport { scrollableStyles } from '../styles/scroll-container';\n/**\n * A container that shows top and bottom keylines when the\n * content overflows into the scrollable element.\n */\n\nvar ScrollContainer =\n/*#__PURE__*/\nforwardRef(function (props, ref) {\n  var _useStateRef = useStateRef({\n    previous: false,\n    next: false\n  }),\n      _useStateRef2 = _slicedToArray(_useStateRef, 2),\n      hasSiblings = _useStateRef2[0],\n      setSiblings = _useStateRef2[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showContentFocus = _useState2[0],\n      setContentFocus = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showTopKeyline = _useState4[0],\n      setTopKeyline = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showBottomKeyline = _useState6[0],\n      setBottomKeyline = _useState6[1];\n\n  var scrollableRef = useRef(null);\n  var setLazySiblings = useLazyCallback(setSiblings);\n  var setLazyContentFocus = useLazyCallback(rafSchedule(function () {\n    var target = scrollableRef.current;\n    target && setContentFocus(target.scrollHeight > target.clientHeight);\n  }));\n  var setLazyKeylines = useLazyCallback(rafSchedule(function () {\n    var target = scrollableRef.current;\n\n    if (target) {\n      var scrollableDistance = target.scrollHeight - target.clientHeight;\n\n      if (hasSiblings.current.previous) {\n        setTopKeyline(target.scrollTop > keylineHeight);\n      }\n\n      if (hasSiblings.current.next) {\n        setBottomKeyline(target.scrollTop <= scrollableDistance - keylineHeight);\n      }\n    }\n  }));\n  useEffect(function () {\n    var target = scrollableRef.current;\n    window.addEventListener('resize', setLazyKeylines, false);\n    target === null || target === void 0 ? void 0 : target.addEventListener('scroll', setLazyKeylines, false);\n    setLazyContentFocus();\n    setLazyKeylines();\n    setLazySiblings({\n      previous: Boolean(target === null || target === void 0 ? void 0 : target.previousElementSibling),\n      next: Boolean(target === null || target === void 0 ? void 0 : target.nextElementSibling)\n    });\n    return function () {\n      window.removeEventListener('resize', setLazyKeylines, false);\n      target === null || target === void 0 ? void 0 : target.removeEventListener('scroll', setLazyKeylines, false);\n    };\n  }, [setLazyContentFocus, setLazyKeylines, setLazySiblings]);\n  return jsx(\"div\", {\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    tabIndex: showContentFocus ? 0 : undefined,\n    \"data-testid\": props.testId && \"\".concat(props.testId, \"--scrollable\"),\n    ref: mergeRefs([ref, scrollableRef]),\n    css: scrollableStyles({\n      showTopKeyline: showTopKeyline,\n      showBottomKeyline: showBottomKeyline,\n      shouldScroll: props.shouldScroll\n    })\n  }, props.children);\n});\nScrollContainer.displayName = 'ScrollContainer';\nexport default ScrollContainer;","map":null,"metadata":{},"sourceType":"module"}
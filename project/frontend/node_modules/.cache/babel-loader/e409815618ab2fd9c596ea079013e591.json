{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { codeFontFamily, fontFamily, fontSize as getFontSize, gridSize as getGridSize } from '@atlaskit/theme/constants';\nimport * as componentTokens from './component-tokens';\nvar fontSize = getFontSize();\nvar gridSize = getGridSize();\nvar disabledRules = {\n  light: {\n    backgroundColor: componentTokens.defaultBackgroundColor.light,\n    backgroundColorFocus: componentTokens.disabledBackgroundColor.light,\n    backgroundColorHover: componentTokens.disabledBackgroundColor.light,\n    // same as bg, appears as no border\n    borderColor: componentTokens.defaultBackgroundColor.light,\n    borderColorFocus: componentTokens.defaultBorderColorFocus.light,\n    textColor: componentTokens.disabledTextColor.light\n  },\n  dark: {\n    backgroundColor: componentTokens.defaultBackgroundColor.dark,\n    backgroundColorFocus: componentTokens.disabledBackgroundColor.dark,\n    backgroundColorHover: componentTokens.disabledBackgroundColor.dark,\n    // same as bg, appears as no border\n    borderColor: componentTokens.defaultBackgroundColor.dark,\n    borderColorFocus: componentTokens.defaultBorderColorFocus.dark,\n    textColor: componentTokens.disabledTextColor.dark\n  }\n};\nvar invalidRules = {\n  light: {\n    backgroundColor: componentTokens.defaultBackgroundColor.light,\n    backgroundColorFocus: componentTokens.defaultBackgroundColorFocus.light,\n    backgroundColorHover: componentTokens.defaultBackgroundColorHover.light,\n    borderColor: componentTokens.invalidBorderColor.light,\n    borderColorFocus: componentTokens.defaultBorderColorFocus.light\n  },\n  dark: {\n    backgroundColor: componentTokens.defaultBackgroundColor.dark,\n    backgroundColorFocus: componentTokens.defaultBackgroundColorFocus.dark,\n    backgroundColorHover: componentTokens.defaultBackgroundColorHover.dark,\n    borderColor: componentTokens.invalidBorderColor.dark,\n    borderColorFocus: componentTokens.defaultBorderColorFocus.dark\n  }\n};\nvar backgroundColor = {\n  standard: componentTokens.defaultBackgroundColor,\n  subtle: componentTokens.transparent,\n  none: componentTokens.transparent\n};\nvar backgroundColorFocus = {\n  standard: componentTokens.defaultBackgroundColorFocus,\n  subtle: componentTokens.defaultBackgroundColorFocus,\n  none: componentTokens.transparent\n};\nvar backgroundColorHover = {\n  standard: componentTokens.defaultBackgroundColorHover,\n  subtle: componentTokens.defaultBackgroundColorHover,\n  none: componentTokens.transparent\n};\nvar borderColor = {\n  standard: componentTokens.defaultBorderColor,\n  subtle: componentTokens.transparent,\n  none: componentTokens.transparent\n};\nvar borderColorFocus = {\n  standard: componentTokens.defaultBorderColorFocus,\n  subtle: componentTokens.defaultBorderColorFocus,\n  none: componentTokens.transparent\n};\n\nvar getContainerTextBgAndBorderColor = function getContainerTextBgAndBorderColor(appearance, mode) {\n  return {\n    backgroundColor: backgroundColor[appearance][mode],\n    borderColor: borderColor[appearance][mode],\n    color: componentTokens.textColor[mode],\n    cursor: 'text',\n    '&:hover': {\n      backgroundColor: backgroundColorHover[appearance][mode]\n    },\n    '&:focus-within': {\n      backgroundColor: backgroundColorFocus[appearance][mode],\n      borderColor: borderColorFocus[appearance][mode]\n    },\n    '&[data-disabled]': {\n      backgroundColor: disabledRules[mode].backgroundColor,\n      borderColor: disabledRules[mode].borderColor,\n      color: disabledRules[mode].textColor,\n      cursor: 'not-allowed'\n    },\n    '&[data-disabled]:focus-within': {\n      backgroundColor: disabledRules[mode].backgroundColorFocus,\n      borderColor: disabledRules[mode].borderColorFocus\n    },\n    '&[data-disabled]:hover': {\n      backgroundColor: disabledRules[mode].backgroundColorHover\n    },\n    '&[data-invalid]': {\n      backgroundColor: invalidRules[mode].backgroundColor,\n      borderColor: invalidRules[mode].borderColor\n    },\n    '&[data-invalid]:focus-within': {\n      backgroundColor: invalidRules[mode].backgroundColorFocus,\n      borderColor: invalidRules[mode].borderColorFocus\n    },\n    '&[data-invalid]:hover': {\n      backgroundColor: invalidRules[mode].backgroundColorHover\n    },\n    '@media screen and (-ms-high-contrast: active)': {\n      '&[data-invalid]:focus-within': {\n        borderColor: 'Highlight'\n      },\n      '&:focus-within': {\n        borderColor: 'Highlight'\n      },\n      '&[data-disabled]': {\n        borderColor: 'GrayText'\n      }\n    }\n  };\n};\n\nvar widthMap = {\n  xsmall: 80,\n  small: 160,\n  medium: 240,\n  large: 320,\n  xlarge: 480\n};\n\nvar getMaxWidth = function getMaxWidth(width) {\n  return !width ? \"100%\" : width in widthMap ? widthMap[width] : +width;\n};\n\nexport var containerStyles = function containerStyles(appearance, mode, width) {\n  return _objectSpread(_objectSpread({\n    alignItems: 'center'\n  }, getContainerTextBgAndBorderColor(appearance, mode)), {}, {\n    borderRadius: 3,\n    borderWidth: 2,\n    borderStyle: appearance === 'none' ? 'none' : 'solid',\n    boxSizing: 'border-box',\n    display: 'flex',\n    flex: '1 1 100%',\n    fontSize: fontSize,\n    justifyContent: 'space-between',\n    maxWidth: getMaxWidth(width),\n    overflow: 'hidden',\n    transition: \"background-color 0.2s ease-in-out, border-color 0.2s ease-in-out\",\n    wordWrap: 'break-word',\n    verticalAlign: 'top',\n    pointerEvents: 'auto'\n  });\n};\nexport var inputStyles = function inputStyles(mode) {\n  return {\n    backgroundColor: 'transparent',\n    border: 0,\n    boxSizing: 'border-box',\n    color: 'inherit',\n    cursor: 'inherit',\n    fontSize: fontSize,\n    minWidth: '0',\n    outline: 'none',\n    width: '100%',\n    lineHeight: gridSize * 2.5 / fontSize,\n    fontFamily: fontFamily(),\n    '&[data-monospaced]': {\n      fontFamily: codeFontFamily()\n    },\n    '&[data-compact]': {\n      padding: \"\".concat(gridSize / 2, \"px \").concat(gridSize - 2, \"px\"),\n      height: \"\".concat((gridSize * 3.5 / fontSize).toFixed(2), \"em\")\n    },\n    '&:not([data-compact])': {\n      padding: \"\".concat(gridSize, \"px \").concat(gridSize - 2, \"px\"),\n      height: \"\".concat((gridSize * 4.5 / fontSize).toFixed(2), \"em\")\n    },\n    '&[disabled]': {\n      // Safari (WebKit) adds a -webkit-text-fill-color style to disabled inputs\n      // which takes priority over color and makes the text unreadable. Need to\n      // override it with the color we want.\n      WebkitTextFillColor: disabledRules[mode].textColor\n    },\n    // Hide the clear indicator on Edge (Windows only)\n    '&::-ms-clear': {\n      display: 'none'\n    },\n    '&:invalid': {\n      boxShadow: 'none'\n    },\n    '&::placeholder': {\n      color: componentTokens.placeholderTextColor[mode],\n      '&:disabled': {\n        color: disabledRules[mode].textColor\n      }\n    },\n    '@media screen and (-ms-high-contrast: active)': {\n      '&[disabled]': {\n        color: 'GrayText'\n      }\n    }\n  };\n};\nexport var TextFieldColors = {\n  backgroundColor: backgroundColor,\n  backgroundColorFocus: backgroundColorFocus,\n  backgroundColorHover: backgroundColorHover,\n  borderColor: borderColor,\n  borderColorFocus: borderColorFocus,\n  placeholderTextColor: componentTokens.placeholderTextColor,\n  textColor: componentTokens.textColor,\n  invalidRules: invalidRules,\n  disabledRules: disabledRules\n};","map":null,"metadata":{},"sourceType":"module"}
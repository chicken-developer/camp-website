{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport { ClassNames, keyframes } from '@emotion/core';\nimport { prefersReducedMotion } from '../utils/accessibility';\nimport { largeDurationMs } from '../utils/durations';\nimport { useSetTimeout } from '../utils/timer-hooks';\nimport { useExitingPersistence } from './exiting-persistence';\nimport { useStaggeredEntrance } from './staggered-entrance';\n/**\n * Used to multiply the initial duration for exiting motions.\n */\n\nvar EXITING_MOTION_MULTIPLIER = 0.5;\n/**\n * This is the base INTERNAL component used for all other entering motions.\n * This does not need Javascript to execute on the client so it will run immediately\n * for any SSR rendered React apps before the JS has executed.\n */\n\nvar EnteringMotion = function EnteringMotion(_ref) {\n  var children = _ref.children,\n      animationTimingFunction = _ref.animationTimingFunction,\n      enteringAnimation = _ref.enteringAnimation,\n      exitingAnimation = _ref.exitingAnimation,\n      isPaused = _ref.isPaused,\n      onFinishMotion = _ref.onFinish,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? largeDurationMs : _ref$duration;\n  var staggered = useStaggeredEntrance();\n\n  var _useExitingPersistenc = useExitingPersistence(),\n      isExiting = _useExitingPersistenc.isExiting,\n      onExitFinished = _useExitingPersistenc.onFinish,\n      appear = _useExitingPersistenc.appear;\n\n  var setTimeout = useSetTimeout();\n  var paused = isPaused || !staggered.isReady;\n  var delay = isExiting ? 0 : staggered.delay;\n  var state = isExiting ? 'exiting' : 'entering';\n\n  var _useState = useState(appear),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasAnimationStyles = _useState2[0],\n      setHasAnimationStyles = _useState2[1];\n\n  useEffect(function () {\n    // Tracking this to prevent changing state on an unmounted component\n    var isCancelled = false;\n\n    if (paused) {\n      return;\n    } // On initial mount if elements aren't set to animate on appear, we return early and callback\n\n\n    if (!appear) {\n      onFinishMotion && onFinishMotion(state);\n      return;\n    } // Elements may need animation styles back after initial mount (they could animate out)\n\n\n    setHasAnimationStyles(true);\n    setTimeout(function () {\n      if (state === 'exiting') {\n        onExitFinished && onExitFinished();\n      }\n\n      if (!isCancelled) {\n        setHasAnimationStyles(false);\n      }\n\n      onFinishMotion && onFinishMotion(state);\n    }, isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration + delay);\n    return function () {\n      isCancelled = true;\n    }; // We ignore this for onFinishMotion as consumers could potentially inline the function\n    // which would then trigger this effect every re-render.\n    // We want to make it easier for consumers so we go down this path unfortunately.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout]);\n  return (\n    /*#__PURE__*/\n    React.createElement(ClassNames, null, function (_ref2) {\n      var css = _ref2.css;\n      return children({\n        ref: staggered.ref,\n        className: hasAnimationStyles ? css(_objectSpread({\n          animationName: \"\".concat(keyframes(isExiting ? exitingAnimation || enteringAnimation : enteringAnimation)),\n          animationTimingFunction: animationTimingFunction(state),\n          animationDelay: \"\".concat(delay, \"ms\"),\n          animationFillMode: isExiting ? 'forwards' : 'backwards',\n          animationDuration: \"\".concat(isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration, \"ms\"),\n          animationPlayState: paused ? 'paused' : 'running'\n        }, prefersReducedMotion())) : ''\n      }, state);\n    })\n  );\n};\n\nexport default EnteringMotion;","map":null,"metadata":{},"sourceType":"module"}
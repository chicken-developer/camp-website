{"ast":null,"code":"import _slicedToArray from \"/home/dev/Desktop/Projects/camp-website/project/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/dev/Desktop/Projects/camp-website/project/frontend/src/HomePage/HomePage.tsx\";\nimport React, { Fragment, useCallback, useState } from 'react';\nimport Button from '@atlaskit/button/standard-button';\nimport { Field, HelperMessage } from '@atlaskit/form';\nimport Textfield from '@atlaskit/textfield';\nimport Modal, { ModalTransition } from '@atlaskit/modal-dialog';\nexport default function HomePage() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setIsOpen = _useState2[1];\n\n  const close = () => setIsOpen(false);\n\n  const open = () => setIsOpen(true);\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        name = _useState4[0],\n        setName = _useState4[1];\n\n  const CustomContainer = useCallback(props => {\n    return React.createElement(\"form\", Object.assign({}, props, {\n      onSubmit: e => {\n        e.preventDefault();\n        const data = new FormData(e.target);\n        const obj = {};\n        data.forEach((val, key) => {\n          obj[key] = val;\n        });\n        setName(obj.name);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }), props.children);\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Button, {\n    appearance: \"primary\",\n    onClick: open,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Open modal\"), React.createElement(ModalTransition, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, isOpen && React.createElement(Modal, {\n    actions: [{\n      text: 'Create',\n      type: 'submit'\n    }, {\n      text: 'Close',\n      onClick: close\n    }],\n    components: {\n      Container: CustomContainer\n    },\n    onClose: close,\n    heading: \"Create a user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Field, {\n    id: \"name\",\n    name: \"name\",\n    label: \"Type your name to continue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, ({\n    fieldProps\n  }) => React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Textfield, Object.assign({}, fieldProps, {\n    defaultValue: \"Atlassy\",\n    value: undefined,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(HelperMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, name ? \"Hello, \".concat(name) : ''))))));\n}","map":{"version":3,"sources":["/home/dev/Desktop/Projects/camp-website/project/frontend/src/HomePage/HomePage.tsx"],"names":["React","Fragment","useCallback","useState","Button","Field","HelperMessage","Textfield","Modal","ModalTransition","HomePage","isOpen","setIsOpen","close","open","name","setName","CustomContainer","props","e","preventDefault","data","FormData","target","obj","forEach","val","key","children","text","type","onClick","Container","fieldProps","undefined"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,QAAvC,QAAuD,OAAvD;AAEA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,gBAArC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,OAAOC,KAAP,IAAyCC,eAAzC,QAAgE,wBAAhE;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA,oBACHP,QAAQ,CAAC,KAAD,CADL;AAAA;AAAA,QACxBQ,MADwB;AAAA,QAChBC,SADgB;;AAE/B,QAAMC,KAAK,GAAG,MAAMD,SAAS,CAAC,KAAD,CAA7B;;AACA,QAAME,IAAI,GAAG,MAAMF,SAAS,CAAC,IAAD,CAA5B;;AAH+B,qBAIPT,QAAQ,CAAC,EAAD,CAJD;AAAA;AAAA,QAIxBY,IAJwB;AAAA,QAIlBC,OAJkB;;AAM/B,QAAMC,eAAe,GAAGf,WAAW,CAAEgB,KAAD,IAAoC;AACpE,WACI,8CACQA,KADR;AAEI,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACbA,QAAAA,CAAC,CAACC,cAAF;AACA,cAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,CAAC,CAACI,MAAf,CAAb;AACA,cAAMC,GAAQ,GAAG,EAAjB;AACAH,QAAAA,IAAI,CAACI,OAAL,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvBH,UAAAA,GAAG,CAACG,GAAD,CAAH,GAAWD,GAAX;AACH,SAFD;AAIAV,QAAAA,OAAO,CAACQ,GAAG,CAACT,IAAL,CAAP;AACH,OAXL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAaKG,KAAK,CAACU,QAbX,CADJ;AAiBH,GAlBkC,EAkBhC,EAlBgC,CAAnC;AAoBA,SACI,0CACI,oBAAC,MAAD;AAAQ,IAAA,UAAU,EAAC,SAAnB;AAA6B,IAAA,OAAO,EAAEd,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAKI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,MAAM,IACH,oBAAC,KAAD;AACI,IAAA,OAAO,EAAE,CACL;AAAEkB,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KADK,EAEL;AAAED,MAAAA,IAAI,EAAE,OAAR;AAAiBE,MAAAA,OAAO,EAAElB;AAA1B,KAFK,CADb;AAKI,IAAA,UAAU,EAAE;AACRmB,MAAAA,SAAS,EAAEf;AADH,KALhB;AAQI,IAAA,OAAO,EAAEJ,KARb;AASI,IAAA,OAAO,EAAC,eATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,MAAtB;AAA6B,IAAA,KAAK,EAAC,4BAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC;AAAEoB,IAAAA;AAAF,GAAD,KACG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD,oBACQA,UADR;AAEI,IAAA,YAAY,EAAC,SAFjB;AAGI,IAAA,KAAK,EAAEC,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,EAMI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBnB,IAAI,oBAAaA,IAAb,IAAsB,EAA1C,CANJ,CAFR,CAXJ,CAFR,CALJ,CADJ;AAoCH","sourcesContent":["import React, { Fragment, useCallback, useState } from 'react';\n\nimport Button from '@atlaskit/button/standard-button';\nimport { Field, HelperMessage } from '@atlaskit/form';\nimport Textfield from '@atlaskit/textfield';\n\nimport Modal, { ContainerComponentProps, ModalTransition } from '@atlaskit/modal-dialog';\n\nexport default function HomePage() {\n    const [isOpen, setIsOpen] = useState(false);\n    const close = () => setIsOpen(false);\n    const open = () => setIsOpen(true);\n    const [name, setName] = useState('');\n\n    const CustomContainer = useCallback((props: ContainerComponentProps) => {\n        return (\n            <form\n                {...props}\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    const data = new FormData(e.target as HTMLFormElement);\n                    const obj: any = {};\n                    data.forEach((val, key) => {\n                        obj[key] = val;\n                    });\n\n                    setName(obj.name);\n                }}\n            >\n                {props.children}\n            </form>\n        );\n    }, []);\n\n    return (\n        <>\n            <Button appearance=\"primary\" onClick={open}>\n                Open modal\n            </Button>\n\n            <ModalTransition>\n                {isOpen && (\n                    <Modal\n                        actions={[\n                            { text: 'Create', type: 'submit' },\n                            { text: 'Close', onClick: close },\n                        ]}\n                        components={{\n                            Container: CustomContainer,\n                        }}\n                        onClose={close}\n                        heading=\"Create a user\"\n                    >\n                        <Field id=\"name\" name=\"name\" label=\"Type your name to continue\">\n                            {({ fieldProps }) => (\n                                <Fragment>\n                                    <Textfield\n                                        {...fieldProps}\n                                        defaultValue=\"Atlassy\"\n                                        value={undefined}\n                                    />\n                                    <HelperMessage>{name ? `Hello, ${name}` : ''}</HelperMessage>\n                                </Fragment>\n                            )}\n                        </Field>\n                    </Modal>\n                )}\n            </ModalTransition>\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}
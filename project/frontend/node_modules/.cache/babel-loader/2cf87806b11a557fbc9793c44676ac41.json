{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { forwardRef } from 'react';\nimport { useAnalyticsEvents } from '../hooks/useAnalyticsEvents';\nimport { usePatchedProps } from '../hooks/usePatchedProps';\n\nvar withAnalyticsEvents = function withAnalyticsEvents() {\n  var createEventMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (WrappedComponent) {\n    var WithAnalyticsEvents =\n    /*#__PURE__*/\n    forwardRef(function (props, ref) {\n      var _usePatchedProps = usePatchedProps(createEventMap, props),\n          patchedEventProps = _usePatchedProps.patchedEventProps;\n\n      var _useAnalyticsEvents = useAnalyticsEvents(),\n          createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;\n\n      return (\n        /*#__PURE__*/\n        React.createElement(WrappedComponent, _extends({}, props, patchedEventProps, {\n          createAnalyticsEvent: createAnalyticsEvent,\n          ref: ref\n        }))\n      );\n    }); // @ts-ignore\n\n    WithAnalyticsEvents.displayName = \"WithAnalyticsEvents(\".concat( // @ts-ignore disneyName doesn't exist on type\n    WrappedComponent.displayName || WrappedComponent.name, \")\");\n    return WithAnalyticsEvents;\n  };\n};\n\nexport default withAnalyticsEvents;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport React, { forwardRef, memo, useCallback } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport { usePlatformLeafEventHandler } from '@atlaskit/analytics-next/usePlatformLeafEventHandler';\nimport noop from '@atlaskit/ds-lib/noop';\nimport { DN90A, N100A } from '@atlaskit/theme/colors';\nimport { useGlobalTheme } from '@atlaskit/theme/components';\nimport { layers } from '@atlaskit/theme/constants';\nvar packageName = \"@atlaskit/blanket\";\nvar packageVersion = \"12.0.1\";\nvar analyticsAttributes = {\n  componentName: 'blanket',\n  packageName: packageName,\n  packageVersion: packageVersion\n};\nvar baseStyle = css({\n  position: 'fixed',\n  zIndex: layers.blanket(),\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  opacity: 1,\n  overflowY: 'auto',\n  pointerEvents: 'initial'\n});\nvar shouldAllowClickThroughStyle = css({\n  pointerEvents: 'none'\n});\nvar invisible = css({\n  opacity: 0\n});\nvar lightBg = css({\n  backgroundColor: N100A\n});\nvar darkBg = css({\n  backgroundColor: DN90A\n});\nvar backgroundStyle = {\n  light: lightBg,\n  dark: darkBg\n};\n/**\n * __Blanket__\n *\n * A Blanket provides the overlay layer for components such as a modal dialog or a tooltip\n *\n * - [Examples](https://atlaskit.atlassian.com/examples/design-system/blanket/basic-usage)\n */\n\nvar Blanket =\n/*#__PURE__*/\nmemo(\n/*#__PURE__*/\nforwardRef(function Blanket(_ref, ref) {\n  var _ref$shouldAllowClick = _ref.shouldAllowClickThrough,\n      shouldAllowClickThrough = _ref$shouldAllowClick === void 0 ? false : _ref$shouldAllowClick,\n      _ref$isTinted = _ref.isTinted,\n      isTinted = _ref$isTinted === void 0 ? false : _ref$isTinted,\n      _ref$onBlanketClicked = _ref.onBlanketClicked,\n      onBlanketClicked = _ref$onBlanketClicked === void 0 ? noop : _ref$onBlanketClicked,\n      testId = _ref.testId,\n      children = _ref.children,\n      analyticsContext = _ref.analyticsContext;\n\n  var _useGlobalTheme = useGlobalTheme(),\n      mode = _useGlobalTheme.mode;\n\n  var onBlanketClickedWithAnalytics = usePlatformLeafEventHandler(_objectSpread({\n    fn: onBlanketClicked,\n    action: 'clicked',\n    analyticsData: analyticsContext\n  }, analyticsAttributes));\n  var blanketClickOutsideChildren = useCallback(function (e) {\n    return e.currentTarget === e.target ? onBlanketClickedWithAnalytics(e) : undefined;\n  }, [onBlanketClickedWithAnalytics]);\n  var onClick = shouldAllowClickThrough ? undefined : blanketClickOutsideChildren;\n  return jsx(\"div\", {\n    role: \"presentation\",\n    css: [baseStyle, !isTinted && invisible, shouldAllowClickThrough && shouldAllowClickThroughStyle, backgroundStyle[mode]],\n    onClick: onClick,\n    \"data-testid\": testId,\n    ref: ref\n  }, children);\n}));\nBlanket.displayName = 'Blanket';\nexport default Blanket;","map":null,"metadata":{},"sourceType":"module"}
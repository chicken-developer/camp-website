{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n/** @jsx jsx */\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { jsx } from '@emotion/core';\nimport { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';\nimport useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';\nimport blockEvents from './block-events';\nimport { getContentStyle, getFadingCss, getIconStyle, overlayCss } from './css';\n\nfunction noop() {} // Disabled buttons will still publish events for nested elements in webkit.\n// We are disabling pointer events on child elements so that\n// the button will always be the target of events\n// Note: firefox does not have this behaviour for child elements\n\n\nvar noPointerEventsOnChildrenCss = {\n  '> *': {\n    pointerEvents: 'none'\n  }\n};\nexport default\n/*#__PURE__*/\nReact.forwardRef(function ButtonBase(props, ref) {\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'default' : _props$appearance,\n      buttonCss = props.buttonCss,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 'default' : _props$spacing,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      _props$shouldFitConta = props.shouldFitContainer,\n      shouldFitContainer = _props$shouldFitConta === void 0 ? false : _props$shouldFitConta,\n      _props$isSelected = props.isSelected,\n      isSelected = _props$isSelected === void 0 ? false : _props$isSelected,\n      iconBefore = props.iconBefore,\n      iconAfter = props.iconAfter,\n      children = props.children,\n      className = props.className,\n      href = props.href,\n      overlay = props.overlay,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n      _props$type = props.type,\n      type = _props$type === void 0 ? !href ? 'button' : undefined : _props$type,\n      _props$onMouseDown = props.onMouseDown,\n      providedOnMouseDown = _props$onMouseDown === void 0 ? noop : _props$onMouseDown,\n      _props$onClick = props.onClick,\n      providedOnClick = _props$onClick === void 0 ? noop : _props$onClick,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? href ? 'a' : 'button' : _props$component,\n      testId = props.testId,\n      analyticsContext = props.analyticsContext,\n      rest = _objectWithoutProperties(props, [\"appearance\", \"buttonCss\", \"spacing\", \"autoFocus\", \"isDisabled\", \"shouldFitContainer\", \"isSelected\", \"iconBefore\", \"iconAfter\", \"children\", \"className\", \"href\", \"overlay\", \"tabIndex\", \"type\", \"onMouseDown\", \"onClick\", \"component\", \"testId\", \"analyticsContext\"]);\n\n  var ourRef = useRef();\n  var setRef = useCallback(function (node) {\n    ourRef.current = node;\n\n    if (ref == null) {\n      return;\n    }\n\n    if (typeof ref === 'function') {\n      ref(node);\n      return;\n    } // @ts-ignore\n\n\n    ref.current = node;\n  }, [ourRef, ref]); // Cross browser auto focusing is pretty broken, so we are doing it ourselves\n\n  useAutoFocus(ourRef, autoFocus);\n  var onClick = usePlatformLeafEventHandler({\n    fn: providedOnClick,\n    action: 'clicked',\n    componentName: 'button',\n    packageName: \"@atlaskit/button\",\n    packageVersion: \"15.1.8\",\n    analyticsData: analyticsContext\n  }); // Button currently calls preventDefault, which is not standard button behaviour\n\n  var onMouseDown = useCallback(function (event) {\n    event.preventDefault();\n    providedOnMouseDown(event);\n  }, [providedOnMouseDown]); // Lose focus when becoming disabled (standard button behaviour)\n\n  useEffect(function () {\n    var el = ourRef.current;\n\n    if (isDisabled && el && el === document.activeElement) {\n      el.blur();\n    }\n  }, [isDisabled]); // we are 'disabling' input with a button when there is an overlay\n\n  var hasOverlay = Boolean(overlay);\n  var fadeCss = getFadingCss({\n    hasOverlay: hasOverlay\n  });\n  var isInteractive = !isDisabled && !hasOverlay;\n  return jsx(Component, _extends({}, rest, {\n    css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss],\n    className: className,\n    ref: setRef,\n    onClick: onClick,\n    onMouseDown: onMouseDown,\n    disabled: isDisabled,\n    href: isInteractive ? href : undefined // using undefined so that the property doesn't exist when false\n    ,\n    \"data-has-overlay\": hasOverlay ? true : undefined,\n    \"data-testid\": testId,\n    type: type // Adding a tab index so element is always focusable, even when not a <button> or <a>\n    // Disabling focus via keyboard navigation when disabled\n    // as this is standard button behaviour\n    ,\n    tabIndex: isDisabled ? -1 : tabIndex\n  }, blockEvents({\n    isInteractive: isInteractive\n  })), iconBefore ? jsx(\"span\", {\n    css: [fadeCss, getIconStyle({\n      spacing: spacing\n    })]\n  }, iconBefore) : null, children ? jsx(\"span\", {\n    css: [fadeCss, getContentStyle({\n      spacing: spacing\n    })]\n  }, children) : null, iconAfter ? jsx(\"span\", {\n    css: [fadeCss, getIconStyle({\n      spacing: spacing\n    })]\n  }, iconAfter) : null, overlay ? jsx(\"span\", {\n    css: overlayCss\n  }, overlay) : null);\n});","map":null,"metadata":{},"sourceType":"module"}
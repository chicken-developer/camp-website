{"ast":null,"code":"import React, { Children, createContext, memo, useContext, useMemo, useRef } from 'react';\nimport { isReducedMotion } from '../utils/accessibility';\nimport { useForceRender } from '../utils/use-force-render';\n/**\n * Internally we will be playing with an element that will always have a key defined.\n */\n// We define empty context here so the object doesn't change.\n\nvar emptyContext = {\n  // Motions will always appear if not inside a exiting persistence component.\n  appear: true,\n  isExiting: false\n};\nvar ExitingContext =\n/*#__PURE__*/\ncreateContext(emptyContext);\n\nvar isAnyPreviousKeysMissingFromCurrent = function isAnyPreviousKeysMissingFromCurrent(currentMap, previous) {\n  for (var i = 0; i < previous.length; i++) {\n    var element = previous[i];\n    var _key = element.key;\n\n    if (!currentMap[_key]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * This method will wrap any React element with a context provider. We're using context (instead of\n * cloneElement) so we can communicate between multiple elements without the need of prop drilling\n * (results in a better API for consumers).\n */\n\n\nvar wrapChildWithContextProvider = function wrapChildWithContextProvider(child) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyContext;\n  return (\n    /*#__PURE__*/\n    React.createElement(ExitingContext.Provider, {\n      key: \"\".concat(child.key, \"-provider\"),\n      value: value\n    }, child)\n  );\n};\n\nvar childrenToObj = function childrenToObj(children) {\n  return children.reduce(function (acc, child) {\n    acc[child.key] = child;\n    return acc;\n  }, {});\n};\n\nvar spliceNewElementsIntoPrevious = function spliceNewElementsIntoPrevious(current, previous) {\n  var splicedChildren = previous.concat([]);\n  var previousMap = childrenToObj(previous);\n\n  for (var i = 0; i < current.length; i++) {\n    var child = current[i];\n    var childIsNew = !previousMap[child.key];\n\n    if (childIsNew) {\n      // This will insert the new element after the previous element.\n      splicedChildren.splice(i + 1, 0, child);\n    }\n  }\n\n  return splicedChildren;\n};\n/**\n * This function will convert all children types to an array while also filtering out non-valid React elements.\n */\n\n\nvar childrenToArray = function childrenToArray(children) {\n  var childrenAsArray = []; // We convert children to an array using this helper method as it will add keys to children that do not\n  // have them, such as when we have hardcoded children that are conditionally rendered.\n\n  Children.toArray(children).forEach(function (child) {\n    // We ignore any boolean children to make our code a little more simple later on,\n    // and also filter out any falsies (empty strings, nulls, and undefined).\n    if (typeof child !== 'boolean' && Boolean(child)) {\n      // Children WILL have a key after being forced into an array using the React.Children helper.\n      childrenAsArray.push(child);\n    }\n  });\n  return childrenAsArray;\n};\n/**\n * This handles the case when a render updates during an exit motion.\n * If any child is mounted again we removed them from the exiting children object and return true.\n */\n\n\nvar hasAnyExitingChildMountedAgain = function hasAnyExitingChildMountedAgain(exitingChildren, children) {\n  var exitingChildMountedAgain = false;\n  children.forEach(function (child) {\n    if (exitingChildren.current[child.key]) {\n      exitingChildMountedAgain = true;\n      delete exitingChildren.current[child.key];\n    }\n  });\n  return exitingChildMountedAgain;\n};\n\nvar ExitingPersistence =\n/*#__PURE__*/\nmemo(function (_ref) {\n  var _ref$appear = _ref.appear,\n      appearFromProp = _ref$appear === void 0 ? false : _ref$appear,\n      childs = _ref.children,\n      exitThenEnter = _ref.exitThenEnter;\n  var children = childrenToArray(childs);\n  var childrenObj = childrenToObj(children);\n  var previousChildren = useRef([]);\n  var persistedChildren = useRef([]);\n  var forceRender = useForceRender();\n  var exitingChildren = useRef({});\n  var appear = useRef(appearFromProp);\n  var defaultContextValue = useMemo(function () {\n    return {\n      appear: appear.current,\n      isExiting: false\n    };\n  }, // React rules of hooks says this isn't needed because mutating appear won't cause a re-render.\n  // While technically true - it will trigger this to make a new object on the _next_ render which is what we want.\n  // Remove this or use appear instead of appear.current and you will notice a test breaks.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [appear.current]);\n\n  if (isReducedMotion()) {\n    return children;\n  }\n\n  if (!appear.current) {\n    // We always want child motions to appear after the initial mount.\n    appear.current = true;\n  } // This entire block can't be an effect because we need it to run synchronously during a render\n  // else when elements are being removed they will be remounted instead of being updated.\n\n\n  if (previousChildren.current.length && isAnyPreviousKeysMissingFromCurrent(childrenObj, previousChildren.current)) {\n    if (persistedChildren.current.length === 0 || hasAnyExitingChildMountedAgain(exitingChildren, children)) {\n      persistedChildren.current = previousChildren.current;\n    } // We have persisted children now set from previous children.\n    // Let's update previous children so we have it available next render.\n\n\n    previousChildren.current = children;\n    return (exitThenEnter ? persistedChildren.current : spliceNewElementsIntoPrevious(children, persistedChildren.current)).map(function (child) {\n      var currentChild = childrenObj[child.key];\n\n      if (!currentChild) {\n        // We've found an exiting child - mark it!\n        exitingChildren.current[child.key] = true;\n        return wrapChildWithContextProvider(child, {\n          isExiting: true,\n          appear: true,\n          onFinish: function onFinish() {\n            delete exitingChildren.current[child.key]; // We will only remove the exiting elements when any subsequent exiting elements have also finished.\n            // Think of removing many items from a todo list - when removing a few over a few clicks we don't\n            // want the list jumping around when they exit.\n\n            if (Object.keys(exitingChildren.current).length === 0) {\n              // Set previous children to nothing.\n              // This let's us skip the next render check as it's assumed children and previous will be the same.\n              previousChildren.current = [];\n              persistedChildren.current = []; // Re-render after the element(s) have animated away which will end up rendering the latest children.\n\n              forceRender();\n            }\n          }\n        });\n      } // This element isn't exiting.\n      // Wrap context and let's continue on our way.\n\n\n      return wrapChildWithContextProvider(currentChild, defaultContextValue);\n    });\n  } else {\n    previousChildren.current = children;\n  }\n\n  return children.map(function (child) {\n    return wrapChildWithContextProvider(child, defaultContextValue);\n  });\n});\nexport var useExitingPersistence = function useExitingPersistence() {\n  return useContext(ExitingContext);\n};\nExitingPersistence.displayName = 'ExitingPersistence';\nexport default ExitingPersistence;","map":null,"metadata":{},"sourceType":"module"}
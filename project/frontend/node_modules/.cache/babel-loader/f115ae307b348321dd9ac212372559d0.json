{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport AnalyticsEvent from './AnalyticsEvent';\n\nvar UIAnalyticsEvent =\n/*#__PURE__*/\nfunction (_AnalyticsEvent) {\n  _inherits(UIAnalyticsEvent, _AnalyticsEvent);\n\n  var _super = _createSuper(UIAnalyticsEvent);\n\n  function UIAnalyticsEvent(props) {\n    var _this;\n\n    _classCallCheck(this, UIAnalyticsEvent);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"clone\", function () {\n      if (_this.hasFired) {\n        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {\n          // eslint-disable-next-line no-console\n          console.warn(\"Cannot clone an event after it's been fired.\");\n        }\n\n        return null;\n      }\n\n      var context = _toConsumableArray(_this.context);\n\n      var handlers = _toConsumableArray(_this.handlers);\n      /**\n       * A hacky \"deep clone\" of the object. This is limited in that it wont\n       * support functions, regexs, Maps, Sets, etc, but none of those need to\n       * be represented in our payload.\n       */\n\n\n      var payload = JSON.parse(JSON.stringify(_this.payload));\n      return new UIAnalyticsEvent({\n        context: context,\n        handlers: handlers,\n        payload: payload\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fire\", function (channel) {\n      if (_this.hasFired) {\n        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {\n          // eslint-disable-next-line no-console\n          console.warn('Cannot fire an event twice.');\n        }\n\n        return;\n      }\n\n      _this.handlers.forEach(function (handler) {\n        return handler(_assertThisInitialized(_this), channel);\n      });\n\n      _this.hasFired = true;\n    });\n\n    _this.context = props.context || [];\n    _this.handlers = props.handlers || [];\n    _this.hasFired = false;\n    return _this;\n  }\n\n  _createClass(UIAnalyticsEvent, [{\n    key: \"update\",\n    value: function update(updater) {\n      if (this.hasFired) {\n        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {\n          // eslint-disable-next-line no-console\n          console.warn(\"Cannot update an event after it's been fired.\");\n        }\n\n        return this;\n      }\n\n      return _get(_getPrototypeOf(UIAnalyticsEvent.prototype), \"update\", this).call(this, updater);\n    }\n  }]);\n\n  return UIAnalyticsEvent;\n}(AnalyticsEvent);\n\nexport { UIAnalyticsEvent as default };","map":null,"metadata":{},"sourceType":"module"}
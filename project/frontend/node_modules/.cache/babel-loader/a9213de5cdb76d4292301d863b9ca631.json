{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\n\nvar getHookDeps = function getHookDeps(opts) {\n  switch (opts.cleanup) {\n    case 'next-effect':\n      return undefined;\n\n    case 'unmount':\n    default:\n      return [];\n  }\n};\n/**\n * Will return request animation frame as a function which will clean itself up.\n */\n\n\nexport var useRequestAnimationFrame = function useRequestAnimationFrame() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    cleanup: 'unmount'\n  };\n  var frames = useRef([]);\n  useEffect(function () {\n    return function () {\n      if (frames.current.length) {\n        frames.current.forEach(function (id) {\n          return cancelAnimationFrame(id);\n        });\n        frames.current = [];\n      }\n    }; // We dynamically set this so we either clean up on the next effect - or on unmount.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, getHookDeps(opts));\n  return useCallback(function (handler) {\n    var id = requestAnimationFrame(function (time) {\n      frames.current = frames.current.filter(function (frameId) {\n        return frameId !== id;\n      });\n      handler(time);\n    });\n    frames.current.push(id);\n  }, []);\n};\n/**\n * Will return set  timeout as a function which will clean itself up.\n */\n\nexport var useSetTimeout = function useSetTimeout() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    cleanup: 'unmount'\n  };\n  var timeouts = useRef([]);\n  useEffect(function () {\n    return function () {\n      if (timeouts.current.length) {\n        timeouts.current.forEach(function (id) {\n          return clearTimeout(id);\n        });\n        timeouts.current = [];\n      }\n    }; // We dynamically set this so we either clean up on the next effect - or on unmount.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, getHookDeps(opts));\n  return useCallback(function (handler, timeout) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    var id = setTimeout.apply(void 0, [function () {\n      timeouts.current = timeouts.current.filter(function (timeoutId) {\n        return timeoutId !== id;\n      });\n      handler();\n    }, timeout].concat(args));\n    timeouts.current.push(id);\n  }, []);\n};","map":null,"metadata":{},"sourceType":"module"}
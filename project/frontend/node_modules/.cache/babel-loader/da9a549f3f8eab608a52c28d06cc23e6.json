{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useMemo } from 'react';\nimport AnalyticsContext from '../components/AnalyticsContext';\n\nvar withAnalyticsContext = function withAnalyticsContext(defaultData) {\n  return function (WrappedComponent) {\n    var WithAnalyticsContext =\n    /*#__PURE__*/\n    forwardRef(function (_ref, ref) {\n      var analyticsContext = _ref.analyticsContext,\n          rest = _objectWithoutProperties(_ref, [\"analyticsContext\"]);\n\n      var analyticsData = useMemo(function () {\n        return _objectSpread(_objectSpread({}, defaultData), analyticsContext);\n      }, [analyticsContext]);\n      return (\n        /*#__PURE__*/\n        React.createElement(AnalyticsContext, {\n          data: analyticsData\n        },\n        /*#__PURE__*/\n        React.createElement(WrappedComponent, _extends({}, rest, {\n          ref: ref\n        })))\n      );\n    }); // @ts-ignore\n\n    WithAnalyticsContext.displayName = \"WithAnalyticsContext(\".concat( // @ts-ignore disneyName doesn't exist on type\n    WrappedComponent.displayName || WrappedComponent.name, \")\");\n    return WithAnalyticsContext;\n  };\n};\n\nexport default withAnalyticsContext;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useLayoutEffect, useState } from 'react';\nimport useWindowEvent from '@atlaskit/ds-lib/use-window-event';\n/**\n * Returns how far the body is scrolled from the top of the viewport.\n *\n *   ____\n * ||____|| <-- overflow\n *  |    |  <-- viewport\n *  |____|\n *\n * Scroll distance is the height of overflow outside the viewport.\n */\n\nfunction getScrollDistance() {\n  var _document$documentEle, _document$body;\n\n  return window.pageYOffset || ((_document$documentEle = document.documentElement) === null || _document$documentEle === void 0 ? void 0 : _document$documentEle.scrollTop) || ((_document$body = document.body) === null || _document$body === void 0 ? void 0 : _document$body.scrollTop) || 0;\n}\n/**\n * Prevents programatic scrolling of the viewport with `scrollIntoView`.\n * Should be used in conjunction with a scroll lock to prevent a user from scrolling.\n *\n * @returns scroll top offset of the viewport\n */\n\n\nexport default function usePreventProgrammaticScroll() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrollTopOffset = _useState2[0],\n      setScrollTopOffset = _useState2[1];\n\n  useLayoutEffect(function () {\n    setScrollTopOffset(getScrollDistance());\n  }, []);\n  var onWindowScroll = useCallback(function () {\n    if (getScrollDistance() !== scrollTopOffset) {\n      window.scrollTo(window.pageXOffset, scrollTopOffset);\n    }\n  }, [scrollTopOffset]);\n  useWindowEvent('scroll', onWindowScroll);\n  return scrollTopOffset;\n}","map":null,"metadata":{},"sourceType":"module"}
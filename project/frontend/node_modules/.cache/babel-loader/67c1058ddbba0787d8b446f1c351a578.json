{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { createContext, useContext, useCallback } from 'react';\n/**\n * createTheme is used to create a set of Providers and Consumers for theming components.\n * - Takes a default theme function; this theme function gets a set of props, and returns tokens\n *  based on those props. An example of this default theme function is one that produces the standard\n *  appearance of the component\n * - Returns three things - a Provider that allow for additional themes to be applied, a Consumer\n *  that can get the current theme and fetch it, and a custom hook - useTheme which provides an alternate (although functionally the same) API\n *  to the Consumer.\n **/\n\nexport function createTheme(defaultGetTokens) {\n  var emptyThemeFn = function emptyThemeFn(getTokens, props) {\n    return getTokens(props);\n  };\n  /**\n   * Internally, Theme uses React Context, with internal providers and consumers.\n   * The React Context passes only a function that gets props, and turns them into tokens. This\n   * function gets mixed as more Providers with their own themes are added. This mixed function\n   * is ultimately picked up by Consumers, which implement a context consumer internally to fetch\n   * the theme.\n   **/\n\n\n  var ThemeContext =\n  /*#__PURE__*/\n  createContext(defaultGetTokens);\n\n  function useTheme(themeProps) {\n    var theme = useContext(ThemeContext);\n    var themeFn = theme || emptyThemeFn;\n    var tokens = themeFn(themeProps);\n    return tokens;\n  } // The Theme Consumer takes a function as its child - this function takes tokens, and the\n  // return value is generally a set of nodes with the tokens applied appropriately.\n\n\n  function Consumer(props) {\n    var children = props.children,\n        themeProps = _objectWithoutProperties(props, [\"children\"]); // @ts-ignore See issue for more info: https://github.com/Microsoft/TypeScript/issues/10727\n    // Argument of type 'Pick<ThemeProps & { children: (tokens: ThemeTokens) => ReactNode; }, Exclude<keyof ThemeProps, \"children\">>' is not assignable to parameter of type 'ThemeProps'.ts(2345)\n\n\n    var tokens = useTheme(themeProps); // We add a fragment to ensure we don't break people upgrading.\n    // Previously they may have been able to pass in undefined without things blowing up.\n\n    return (\n      /*#__PURE__*/\n      React.createElement(React.Fragment, null, children(tokens))\n    );\n  }\n  /**\n   * The Theme Provider takes regular nodes as its children, but also takes a *theme function*\n   * - The theme function takes a set of props, as well as a function (getTokens) that can turn props into tokens.\n   * - The getTokens function isn't called immediately - instead the props are passed\n   *    through a mix of parent theming functions\n   * Children of this provider will receive this mixed theme\n   */\n\n\n  function Provider(props) {\n    var themeFn = useContext(ThemeContext);\n    var valueFn = props.value || emptyThemeFn;\n    var mixedFn = useCallback(function (themeProps) {\n      return valueFn(themeFn, themeProps);\n    }, [themeFn, valueFn]);\n    return (\n      /*#__PURE__*/\n      React.createElement(ThemeContext.Provider, {\n        value: mixedFn\n      }, props.children)\n    );\n  }\n\n  return {\n    Consumer: Consumer,\n    Provider: Provider,\n    useTheme: useTheme\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
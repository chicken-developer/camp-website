{"ast":null,"code":"/** @jsx jsx */\nimport React, { useMemo } from 'react';\nimport { jsx } from '@emotion/core';\nimport ErrorIcon from '@atlaskit/icon/glyph/error';\nimport WarningIcon from '@atlaskit/icon/glyph/warning';\nimport { getTitleIconStyles, getTitleTextStyles, headerStyles, titleStyles } from '../styles/content';\n\nvar TitleIcon = function TitleIcon(_ref) {\n  var appearance = _ref.appearance,\n      isHeadingMultiline = _ref.isHeadingMultiline;\n  var titleIconStyles = useMemo(function () {\n    return getTitleIconStyles({\n      appearance: appearance,\n      isHeadingMultiline: isHeadingMultiline\n    });\n  }, [appearance, isHeadingMultiline]);\n  var Icon = appearance === 'danger' ? ErrorIcon : WarningIcon;\n  return jsx(\"span\", {\n    css: titleIconStyles\n  }, jsx(Icon, {\n    label: \"\".concat(appearance, \" icon\")\n  }));\n};\n\nexport default function ModalHeader(props) {\n  var id = props.id,\n      appearance = props.appearance,\n      component = props.component,\n      heading = props.heading,\n      onClose = props.onClose,\n      testId = props.testId,\n      _props$isHeadingMulti = props.isHeadingMultiline,\n      isHeadingMultiline = _props$isHeadingMulti === void 0 ? true : _props$isHeadingMulti;\n  var warning = 'You can provide `component` OR `heading`, not both.';\n  var titleTextStyles = useMemo(function () {\n    return getTitleTextStyles(isHeadingMultiline);\n  }, [isHeadingMultiline]);\n\n  if (!component && !heading) {\n    return null;\n  }\n\n  if (component && heading) {\n    console.warn(warning); // eslint-disable-line no-console\n\n    return null;\n  }\n\n  if (component) {\n    return (\n      /*#__PURE__*/\n      React.createElement(component, {\n        id: id,\n        testId: testId,\n        appearance: appearance,\n        onClose: onClose,\n        isHeadingMultiline: isHeadingMultiline\n      })\n    );\n  }\n\n  return jsx(\"div\", {\n    css: headerStyles,\n    \"data-testid\": testId && \"\".concat(testId, \"--header\")\n  }, jsx(\"h1\", {\n    css: titleStyles\n  }, appearance && jsx(TitleIcon, {\n    appearance: appearance,\n    isHeadingMultiline: isHeadingMultiline\n  }), jsx(\"span\", {\n    id: id,\n    css: titleTextStyles,\n    \"data-testid\": testId && \"\".concat(testId, \"-heading\")\n  }, heading)));\n}","map":null,"metadata":{},"sourceType":"module"}
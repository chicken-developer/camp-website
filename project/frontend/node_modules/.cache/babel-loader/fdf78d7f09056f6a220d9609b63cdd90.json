{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useCallback } from 'react';\nimport Field from './Field';\n\nvar CheckboxField = function CheckboxField(props) {\n  var children = props.children,\n      _props$defaultIsCheck = props.defaultIsChecked,\n      defaultIsChecked = _props$defaultIsCheck === void 0 ? false : _props$defaultIsCheck,\n      value = props.value,\n      rest = _objectWithoutProperties(props, [\"children\", \"defaultIsChecked\", \"value\"]); // Maintains a memoised list of the default values\n\n\n  var defaultValue = useCallback(function () {\n    var currentValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return defaultIsChecked && value !== undefined ? [].concat(_toConsumableArray(currentValue), [value]) : currentValue;\n  }, [value, defaultIsChecked]);\n  return value !== undefined ?\n  /*#__PURE__*/\n  React.createElement(Field, _extends({}, rest, {\n    defaultValue: defaultValue,\n    transform: function transform(event, currentValue) {\n      return event.currentTarget.checked && currentValue ? [].concat(_toConsumableArray(currentValue), [value]) : currentValue.filter(function (v) {\n        return v !== value;\n      });\n    }\n  }), function (_ref) {\n    var _ref$fieldProps = _ref.fieldProps,\n        fieldValue = _ref$fieldProps.value,\n        otherFieldProps = _objectWithoutProperties(_ref$fieldProps, [\"value\"]),\n        others = _objectWithoutProperties(_ref, [\"fieldProps\"]);\n\n    return children(_objectSpread({\n      fieldProps: _objectSpread(_objectSpread({}, otherFieldProps), {}, {\n        isChecked: !!fieldValue.find(function (v) {\n          return v === value;\n        }),\n        value: value\n      })\n    }, others));\n  }) :\n  /*#__PURE__*/\n  React.createElement(Field, _extends({}, rest, {\n    defaultValue: defaultIsChecked,\n    transform: function transform(event) {\n      return event.currentTarget.checked;\n    }\n  }), function (_ref2) {\n    var _ref2$fieldProps = _ref2.fieldProps,\n        fieldValue = _ref2$fieldProps.value,\n        otherFieldProps = _objectWithoutProperties(_ref2$fieldProps, [\"value\"]),\n        others = _objectWithoutProperties(_ref2, [\"fieldProps\"]);\n\n    return children(_objectSpread({\n      fieldProps: _objectSpread(_objectSpread({}, otherFieldProps), {}, {\n        isChecked: fieldValue,\n        value: value\n      })\n    }, others));\n  });\n};\n\nCheckboxField.defaultProps = {\n  defaultIsChecked: false\n};\nexport default CheckboxField;","map":null,"metadata":{},"sourceType":"module"}
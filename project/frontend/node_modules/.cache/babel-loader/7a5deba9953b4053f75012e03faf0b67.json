{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { uid } from 'react-uid';\nimport invariant from 'tiny-invariant';\nimport { FormContext, IsDisabledContext } from './Form';\nimport FieldWrapper, { Label, RequiredIndicator } from './styled/Field';\n\nfunction isEvent(event) {\n  return Boolean(event && event.target);\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n} // Provides the id of the field to message components.\n// This links the message with the field for screen-readers.\n\n\nexport var FieldId =\n/*#__PURE__*/\nReact.createContext(undefined);\n\nfunction usePreviousRef(current) {\n  var ref = useRef(current); // will be updated on the next render\n\n  useEffect(function () {\n    ref.current = current;\n  }); // return the existing current (pre render)\n\n  return ref;\n}\n\nfunction isShallowEqual(previousValue, currentValue) {\n  if (previousValue === currentValue) {\n    return true;\n  } // not checking functions\n\n\n  if (typeof previousValue === 'function' && typeof currentValue === 'function') {\n    return true;\n  }\n\n  if (Array.isArray(previousValue) && Array.isArray(currentValue)) {\n    return JSON.stringify(previousValue) === JSON.stringify(currentValue);\n  }\n\n  if (_typeof(previousValue) === 'object' && _typeof(currentValue) === 'object') {\n    return JSON.stringify(previousValue) === JSON.stringify(currentValue);\n  }\n\n  return false;\n}\n\nfunction Field(props) {\n  var registerField = useContext(FormContext);\n  var isDisabled = useContext(IsDisabledContext) || props.isDisabled;\n  var defaultValue = isFunction(props.defaultValue) ? props.defaultValue() : props.defaultValue;\n\n  var _useState = useState({\n    fieldProps: {\n      onChange: function onChange() {},\n      onBlur: function onBlur() {},\n      onFocus: function onFocus() {},\n      value: defaultValue\n    },\n    error: undefined,\n    valid: false,\n    meta: {\n      dirty: false,\n      dirtySinceLastSubmit: false,\n      touched: false,\n      valid: false,\n      validating: false,\n      submitting: false,\n      submitFailed: false,\n      error: undefined,\n      submitError: undefined\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var latestPropsRef = usePreviousRef(props);\n  var latestStateRef = usePreviousRef(state);\n  /**\n   * HACK: defaultValue can potentially be an array or object which cannot be\n   * passed directly into a `useEffect` dependency array, since it will trigger\n   * the hook every time.\n   */\n\n  var hasDefaultValueChanged = isShallowEqual(latestPropsRef.current.defaultValue, props.defaultValue);\n  useEffect(function () {\n    if (process.env.NODE_ENV !== 'production' && !process.env.CI) {\n      invariant(latestPropsRef.current.name, '@atlaskit/form: Field components have a required name prop');\n    }\n\n    function fieldStateToMeta() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        dirty: value.dirty || false,\n        dirtySinceLastSubmit: value.dirtySinceLastSubmit || false,\n        touched: value.touched || false,\n        valid: value.valid || false,\n        submitting: value.submitting || false,\n        submitFailed: value.submitFailed || false,\n        error: value.error,\n        submitError: value.submitError,\n        validating: !!value.validating\n      };\n    }\n\n    var unregister = registerField(latestPropsRef.current.name, latestPropsRef.current.defaultValue, function (fieldState) {\n      /** Do not update dirtySinceLastSubmit until submission has finished. */\n      var modifiedDirtySinceLastSubmit = fieldState.submitting ? latestStateRef.current.meta.dirtySinceLastSubmit : fieldState.dirtySinceLastSubmit;\n      /** Do not update submitFailed until submission has finished. */\n\n      var modifiedSubmitFailed = fieldState.submitting ? latestStateRef.current.meta.submitFailed : fieldState.submitFailed;\n      /** Do not use submitError if the value has changed. */\n\n      var modifiedSubmitError = modifiedDirtySinceLastSubmit && latestPropsRef.current.validate ? undefined : fieldState.submitError;\n      var modifiedError = modifiedSubmitError || (fieldState.touched || fieldState.dirty) && fieldState.error;\n      /**\n       * If there has been a submit error, then use logic in modifiedError to determine validity,\n       * so we can determine when there is a submit error which we do not want to display\n       * because the value has been changed.\n       */\n\n      var modifiedValid = modifiedSubmitFailed ? modifiedError === undefined : fieldState.valid;\n\n      function getTransform(eventOrValue, currentValue) {\n        if (latestPropsRef.current.transform) {\n          return latestPropsRef.current.transform(eventOrValue, currentValue);\n        }\n\n        if (isEvent(eventOrValue)) {\n          var currentTarget = eventOrValue.currentTarget;\n\n          if (currentTarget.type === 'checkbox') {\n            //@ts-expect-error TODO Fix legit TypeScript 3.9.6 improved inference error\n            if (currentTarget.checked) {\n              return currentTarget.value || true;\n            }\n\n            return currentTarget.value ? undefined : false;\n          } else if (currentTarget) {\n            return currentTarget.value;\n          }\n        } else {\n          return eventOrValue;\n        }\n      }\n\n      setState({\n        fieldProps: {\n          onChange: function onChange(e) {\n            fieldState.change(getTransform(e, fieldState.value));\n          },\n          onBlur: fieldState.blur,\n          onFocus: fieldState.focus,\n          value: fieldState.value\n        },\n        error: modifiedError || undefined,\n\n        /**\n         * The following parameters are optionally typed in final-form to indicate that not all parameters need\n         * to be subscribed to. We cast them as booleans (using || false), since this is what they are semantically.\n         */\n        valid: modifiedValid || false,\n        meta: fieldStateToMeta(fieldState)\n      });\n    }, {\n      dirty: true,\n      dirtySinceLastSubmit: true,\n      touched: true,\n      valid: true,\n      submitting: true,\n      submitFailed: true,\n      value: true,\n      error: true,\n      submitError: true,\n      validating: true\n    }, {\n      getValidator: function getValidator() {\n        return function validate(value, formState, fieldState) {\n          var supplied = latestPropsRef.current.validate;\n\n          if (supplied && fieldState) {\n            return supplied(value, formState, fieldStateToMeta(fieldState));\n          }\n        };\n      }\n    });\n    return unregister;\n  }, [latestPropsRef, latestStateRef, registerField, props.name, hasDefaultValueChanged]);\n  var fieldId = useMemo(function () {\n    return props.id ? props.id : \"\".concat(props.name, \"-\").concat(uid({\n      id: props.name\n    }));\n  }, [props.id, props.name]);\n\n  var extendedFieldProps = _objectSpread(_objectSpread({}, state.fieldProps), {}, {\n    name: props.name,\n    isDisabled: isDisabled,\n    isInvalid: Boolean(state.error),\n    isRequired: Boolean(props.isRequired),\n    'aria-invalid': state.error ? 'true' : 'false',\n    'aria-labelledby': \"\".concat(fieldId, \"-label \").concat(fieldId, \"-helper \").concat(fieldId, \"-valid \").concat(fieldId, \"-error\"),\n    id: fieldId\n  });\n\n  return (\n    /*#__PURE__*/\n    React.createElement(FieldWrapper, null, props.label &&\n    /*#__PURE__*/\n    React.createElement(Label, {\n      id: \"\".concat(fieldId, \"-label\"),\n      htmlFor: fieldId\n    }, props.label, props.isRequired &&\n    /*#__PURE__*/\n    React.createElement(RequiredIndicator, {\n      \"aria-hidden\": \"true\"\n    }, \"*\")),\n    /*#__PURE__*/\n    React.createElement(FieldId.Provider, {\n      value: fieldId\n    }, props.children({\n      fieldProps: extendedFieldProps,\n      error: state.error,\n      valid: state.valid,\n      meta: state.meta\n    })))\n  );\n}\n\nField.defaultProps = {\n  defaultValue: undefined,\n  isDisabled: false\n};\nexport default Field;","map":null,"metadata":{},"sourceType":"module"}
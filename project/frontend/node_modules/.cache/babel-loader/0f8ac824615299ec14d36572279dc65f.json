{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useCallback, useMemo } from 'react';\nimport { default as AnalyticsReactContext } from '@atlaskit/analytics-next-stable-react-context';\nimport { useAnalyticsContext } from '../../hooks/useAnalyticsContext';\nimport { useTrackedRef } from '../../hooks/useTrackedRef';\n\nvar AnalyticsListener = function AnalyticsListener(_ref) {\n  var children = _ref.children,\n      channel = _ref.channel,\n      onEvent = _ref.onEvent;\n  var analyticsContext = useAnalyticsContext();\n  var onEventRef = useTrackedRef(onEvent);\n  var channelRef = useTrackedRef(channel);\n  var getAtlaskitAnalyticsEventHandlers = useCallback(function () {\n    var thisHandler = function thisHandler(event, eventChannel) {\n      if (channelRef.current === '*' || channelRef.current === eventChannel) {\n        onEventRef.current(event, eventChannel);\n      }\n    };\n\n    return [].concat(_toConsumableArray(analyticsContext.getAtlaskitAnalyticsEventHandlers()), [thisHandler]);\n  }, [analyticsContext, channelRef, onEventRef]);\n  var value = useMemo(function () {\n    return {\n      getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,\n      getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext\n    };\n  }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);\n  return (\n    /*#__PURE__*/\n    React.createElement(AnalyticsReactContext.Provider, {\n      value: value\n    }, children)\n  );\n};\n\nexport default AnalyticsListener;","map":null,"metadata":{},"sourceType":"module"}
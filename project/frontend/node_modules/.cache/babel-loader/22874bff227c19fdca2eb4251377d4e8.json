{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useCallback, useEffect, useRef, useState } from 'react';\nimport { createForm } from 'final-form';\nimport createDecorator from 'final-form-focus';\nimport set from 'lodash/set';\nexport var FormContext =\n/*#__PURE__*/\ncreateContext(function () {\n  return function () {};\n});\nexport var IsDisabledContext =\n/*#__PURE__*/\ncreateContext(false);\nexport default function Form(props) {\n  var formRef = useRef(null);\n  var onSubmitRef = useRef(props.onSubmit);\n  onSubmitRef.current = props.onSubmit;\n\n  var _useState = useState(function () {\n    // Types here would break the existing API\n    var finalForm = createForm({\n      onSubmit: function onSubmit() {\n        return onSubmitRef.current.apply(onSubmitRef, arguments);\n      },\n      destroyOnUnregister: true,\n      initialValues: {},\n      mutators: {\n        setDefaultValue: function setDefaultValue(_ref, state) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              name = _ref2[0],\n              defaultValue = _ref2[1];\n\n          if (state.formState.initialValues) {\n            var _initialValues = state.formState.initialValues;\n            var values = state.formState.values;\n\n            var _value = name && typeof defaultValue === 'function' ? defaultValue(_initialValues[name]) : defaultValue;\n            /* eslint-disable no-param-reassign */\n\n            /* eslint-disable no-param-reassign */\n\n\n            set(_initialValues, name, _value);\n            set(values, name, _value);\n            /* eslint-enable */\n          }\n        }\n      }\n    });\n    createDecorator(function () {\n      return formRef.current ? Array.from(formRef.current.querySelectorAll('input')) : [];\n    })(finalForm);\n    return finalForm;\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      form = _useState2[0];\n\n  var _useState3 = useState({\n    dirty: false,\n    submitting: false\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  useEffect(function () {\n    var unsubscribe = form.subscribe(function (_ref3) {\n      var dirty = _ref3.dirty,\n          submitting = _ref3.submitting;\n      setState({\n        dirty: dirty,\n        submitting: submitting\n      });\n    }, {\n      dirty: true,\n      submitting: true\n    });\n    return unsubscribe;\n  }, [form]);\n  var registerField = useCallback(function (name, defaultValue, subscriber, subscription, config) {\n    form.pauseValidation();\n    var unsubscribe = form.registerField(name, subscriber, subscription, config);\n    form.mutators.setDefaultValue(name, defaultValue);\n    form.resumeValidation();\n    return unsubscribe;\n  }, [form]);\n\n  var handleSubmit = function handleSubmit(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    form.submit();\n  };\n\n  var handleReset = function handleReset(initialValues) {\n    form.reset(initialValues);\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && formRef.current) {\n      var submitButton = formRef.current.querySelector('button:not([type]), button[type=\"submit\"], input[type=\"submit\"]');\n\n      if (submitButton) {\n        submitButton.click();\n      }\n\n      e.preventDefault();\n    }\n  };\n\n  var _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      children = props.children;\n  var dirty = state.dirty,\n      submitting = state.submitting;\n  return (\n    /*#__PURE__*/\n    React.createElement(FormContext.Provider, {\n      value: registerField\n    },\n    /*#__PURE__*/\n    React.createElement(IsDisabledContext.Provider, {\n      value: isDisabled\n    }, children({\n      formProps: {\n        onSubmit: handleSubmit,\n        ref: formRef,\n        onKeyDown: handleKeyDown\n      },\n      dirty: dirty,\n      reset: handleReset,\n      submitting: submitting,\n      disabled: isDisabled,\n      getState: function getState() {\n        return form.getState();\n      },\n      getValues: function getValues() {\n        return form.getState().values;\n      },\n      // TODO: deprecate\n      setFieldValue: form.change\n    })))\n  );\n}","map":null,"metadata":{},"sourceType":"module"}
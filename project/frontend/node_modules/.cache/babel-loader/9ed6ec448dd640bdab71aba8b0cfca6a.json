{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport React, { forwardRef, memo, useCallback, useMemo, useRef } from 'react';\nimport { jsx } from '@emotion/core';\nimport { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';\nimport GlobalTheme from '@atlaskit/theme/components';\nimport { containerStyles as getContainerStyles, inputStyles as getInputStyles } from './styles';\nvar analyticsParams = {\n  componentName: 'textField',\n  packageName: \"@atlaskit/textfield\",\n  packageVersion: \"5.0.5\"\n};\nvar TextfieldWithMode =\n/*#__PURE__*/\nforwardRef(function (props, ref) {\n  var input = useRef(null);\n\n  var _props$appearance = props.appearance,\n      appearance = _props$appearance === void 0 ? 'standard' : _props$appearance,\n      _props$isCompact = props.isCompact,\n      isCompact = _props$isCompact === void 0 ? false : _props$isCompact,\n      _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      _props$isInvalid = props.isInvalid,\n      isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,\n      _props$isRequired = props.isRequired,\n      isRequired = _props$isRequired === void 0 ? false : _props$isRequired,\n      _props$isReadOnly = props.isReadOnly,\n      isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,\n      _props$isMonospaced = props.isMonospaced,\n      isMonospaced = _props$isMonospaced === void 0 ? false : _props$isMonospaced,\n      width = props.width,\n      mode = props.mode,\n      elemAfterInput = props.elemAfterInput,\n      elemBeforeInput = props.elemBeforeInput,\n      testId = props.testId,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onMouseDown = props.onMouseDown,\n      className = props.className,\n      otherProps = _objectWithoutProperties(props, [\"appearance\", \"isCompact\", \"isDisabled\", \"isInvalid\", \"isRequired\", \"isReadOnly\", \"isMonospaced\", \"width\", \"mode\", \"elemAfterInput\", \"elemBeforeInput\", \"testId\", \"onFocus\", \"onBlur\", \"onMouseDown\", \"className\"]);\n\n  var handleOnFocus = usePlatformLeafEventHandler(_objectSpread({\n    fn: function fn(event) {\n      onFocus && onFocus(event);\n    },\n    action: 'focused'\n  }, analyticsParams));\n  var handleOnBlur = usePlatformLeafEventHandler(_objectSpread({\n    fn: function fn(event) {\n      onBlur && onBlur(event);\n    },\n    action: 'blurred'\n  }, analyticsParams));\n  var handleOnMouseDown = useCallback(function (event) {\n    /** Running e.preventDefault() on the INPUT prevents double click behaviour */\n    // Sadly we needed this cast as the target type is being correctly set\n    var target = event.target;\n\n    if (target.tagName !== 'INPUT') {\n      event.preventDefault();\n    }\n\n    if (input && input.current && !isDisabled && document.activeElement !== input.current) {\n      input.current.focus();\n    }\n\n    onMouseDown && onMouseDown(event);\n  }, [onMouseDown, input, isDisabled]); // we want to keep a copy of the ref as well as pass it along\n\n  var setInputRef = useCallback(function (inputElement) {\n    input.current = inputElement;\n    var forwardedRef = ref;\n\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (_typeof(forwardedRef) === 'object') {\n      // This is a blunder on the part of @types/react\n      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n      // .current should be assignable\n      // @ts-ignore\n      forwardedRef.current = inputElement;\n    }\n\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(inputElement);\n    }\n  }, [ref]);\n  var inputControlProps = {\n    'data-compact': isCompact ? isCompact : undefined,\n    'data-monospaced': isMonospaced ? isMonospaced : undefined,\n    'aria-invalid': isInvalid ? isInvalid : undefined\n  };\n  var containerControlProps = {\n    'data-disabled': isDisabled ? isDisabled : undefined,\n    'data-invalid': isInvalid ? isInvalid : undefined\n  };\n  var containerStyles = useMemo(function () {\n    return getContainerStyles(appearance, mode, width);\n  }, [appearance, mode, width]);\n  var inputStyle = useMemo(function () {\n    return getInputStyles(mode);\n  }, [mode]);\n  return (// https://product-fabric.atlassian.net/browse/DST-1970\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    jsx(\"div\", _extends({}, containerControlProps, {\n      onMouseDown: handleOnMouseDown,\n      \"data-ds--text-field--container\": true,\n      \"data-testid\": testId && \"\".concat(testId, \"-container\"),\n      css: containerStyles,\n      className: className\n    }), elemBeforeInput, jsx(\"input\", _extends({}, otherProps, inputControlProps, {\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      onBlur: handleOnBlur,\n      onFocus: handleOnFocus,\n      ref: setInputRef,\n      \"data-ds--text-field--input\": true,\n      \"data-testid\": testId,\n      css: inputStyle\n    })), elemAfterInput)\n  );\n});\nvar Textfield =\n/*#__PURE__*/\nforwardRef(function Textfield(props, ref) {\n  return jsx(GlobalTheme.Consumer, null, function (_ref) {\n    var mode = _ref.mode;\n    return jsx(TextfieldWithMode, _extends({}, props, {\n      mode: mode,\n      ref: ref\n    }));\n  });\n});\nTextfield.displayName = 'Textfield';\nexport default\n/*#__PURE__*/\nmemo(Textfield);","map":null,"metadata":{},"sourceType":"module"}
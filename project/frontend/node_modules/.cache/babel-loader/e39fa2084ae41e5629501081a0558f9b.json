{"ast":null,"code":"import { dimensions } from '../constants';\nimport { css } from '@emotion/core';\nexport var commonSVGStyles = {\n  overflow: 'hidden',\n  pointerEvents: 'none',\n\n  /**\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\n   * rule) and then override it with currentColor for the color changes to be picked up.\n   */\n  stop: {\n    stopColor: 'currentColor'\n  },\n\n  /**\n   * For windows high contrast mode\n   */\n  '@media screen and (-ms-high-contrast: white-on-black)': {\n    filter: ' grayscale(100%)',\n    color: '#fff',\n    // N0\n    fill: '#000' // DN0\n\n  },\n  '@media screen and (-ms-high-contrast: black-on-white)': {\n    filter: 'grayscale(100%)',\n    color: '#000',\n    // DN0\n    fill: '#fff' // N0\n\n  }\n};\nvar small = css(dimensions.small);\nvar medium = css(dimensions.medium);\nvar large = css(dimensions.large);\nvar xlarge = css(dimensions.xlarge); // pre-built css style-size map\n\nexport var sizeStyleMap = {\n  small: small,\n  medium: medium,\n  large: large,\n  xlarge: xlarge\n};\n/**\n * Returns the width of the icon's parent span. This function has\n * special behaviour to deal with icon-file-type specifically.\n *\n * The reality is the SVG still has its own dimensions, so this is\n * a secondary fallback which in 95% of cases is not required.\n * It's only really being kept to maintain backward compatability.\n */\n\nexport var getIconSize = function getIconSize(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      size = _ref.size;\n\n  if (width && height) {\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  if (size) {\n    return dimensions[size];\n  }\n\n  return undefined;\n};","map":null,"metadata":{},"sourceType":"module"}
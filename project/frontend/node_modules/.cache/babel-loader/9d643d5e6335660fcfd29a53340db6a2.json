{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { borderRadius as getBorderRadius, fontSize as getFontSize, gridSize as getGridSize } from '@atlaskit/theme/constants';\nimport colors from './colors';\nvar borderRadius = getBorderRadius();\nvar gridSize = getGridSize();\nvar fontSize = getFontSize(); // ## Button layout\n//\n// /------------------------------------------------------------------------------------------------------------------\\\n// |       →  |  ←      |          |      →  |  ←      |           |      →  |  ←      |         |      →  |  ←       |\n// |  10px →  |  ← 2px  |   icon   |  2px →  |  ← 2px  |           |  2px →  |  ← 2px  |  icon   |  2px →  |  ← 10px  |\n// |  padding |  margin |  before  |  margin |  margin |  content  |  margin |  margin |  after  |  margin |  padding |\n// |    (12px total)    |          |    (4px total)    |           |    (4px total)    |         |    (12px total)    |\n// |       →  |  ←      |          |      →  |  ←      |           |      →  |  ←      |         |      →  |  ←       |\n// \\------------------------------------------------------------------------------------------------------------------/\n//                                           ↑                               ↑\n//                                        Margins don't collapse with inline-flex\n//\n\nvar heights = {\n  default: \"\".concat(gridSize * 4 / fontSize, \"em\"),\n  // 32px\n  compact: \"\".concat(gridSize * 3 / fontSize, \"em\"),\n  none: 'auto'\n};\nvar lineHeights = {\n  default: heights.default,\n  compact: heights.compact,\n  none: 'inherit'\n};\nvar padding = {\n  // 10px gutter\n  default: \"0 \".concat(gridSize + gridSize / 4, \"px\"),\n  compact: \"0 \".concat(gridSize + gridSize / 4, \"px\"),\n  none: '0'\n};\nvar singleIconPadding = {\n  // 2px gutter\n  compact: \"0 \".concat(gridSize / 4, \"px\"),\n  default: \"0 \".concat(gridSize / 4, \"px\"),\n  none: '0'\n};\nvar verticalAlign = {\n  default: 'middle',\n  compact: 'middle',\n  none: 'baseline'\n};\nvar innerMargin = {\n  content: \"0 \".concat(gridSize / 4, \"px\"),\n  icon: \"0 \".concat(gridSize / 4, \"px\")\n};\n\nfunction getColor(_ref) {\n  var group = _ref.group,\n      key = _ref.key,\n      mode = _ref.mode;\n  var rule = group[key] || group.default;\n  return rule[mode];\n}\n\nfunction getColors(_ref2) {\n  var appearance = _ref2.appearance,\n      key = _ref2.key,\n      mode = _ref2.mode;\n  return {\n    background: getColor({\n      group: colors.background[appearance],\n      key: key,\n      mode: mode\n    }),\n    // Needing to add !important to overcome specificity issue caused by deprecated AtlaskitThemeProvider\n    color: \"\".concat(getColor({\n      group: colors.color[appearance],\n      key: key,\n      mode: mode\n    }), \" !important\")\n  };\n}\n\nexport function getCss(_ref3) {\n  var appearance = _ref3.appearance,\n      spacing = _ref3.spacing,\n      mode = _ref3.mode,\n      isSelected = _ref3.isSelected,\n      shouldFitContainer = _ref3.shouldFitContainer,\n      isOnlySingleIcon = _ref3.isOnlySingleIcon;\n  var baseColors = getColors({\n    appearance: appearance,\n    key: isSelected ? 'selected' : 'default',\n    mode: mode\n  });\n  return _objectSpread(_objectSpread({\n    alignItems: 'baseline',\n    borderWidth: 0,\n    borderRadius: borderRadius,\n    boxSizing: 'border-box',\n    display: 'inline-flex',\n    fontSize: 'inherit',\n    fontStyle: 'normal',\n    // Chrome recently changed button so that they use 'arial' as the font family\n    fontFamily: 'inherit',\n    fontWeight: 500,\n    maxWidth: '100%',\n    // Needed to position overlay\n    position: 'relative',\n    textAlign: 'center',\n    textDecoration: 'none',\n    transition: 'background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)',\n    whiteSpace: 'nowrap'\n  }, baseColors), {}, {\n    cursor: 'pointer',\n    height: heights[spacing],\n    lineHeight: lineHeights[spacing],\n    padding: isOnlySingleIcon ? singleIconPadding[spacing] : padding[spacing],\n    verticalAlign: verticalAlign[spacing],\n    width: shouldFitContainer ? '100%' : 'auto',\n    // justifyContent required for shouldFitContainer buttons with an icon inside\n    justifyContent: 'center',\n    // Note: we cannot disable pointer events when there is an overlay.\n    // That would be easy for styling, but it would start letting events through on disabled buttons\n    // Disabling visited styles (just using the base colors)\n    '&:visited': _objectSpread({}, baseColors),\n    '&:hover': _objectSpread(_objectSpread({}, getColors({\n      appearance: appearance,\n      key: isSelected ? 'selected' : 'hover',\n      mode: mode\n    })), {}, {\n      textDecoration: !isSelected && (appearance === 'link' || appearance === 'subtle-link') ? 'underline' : 'inherit',\n      // background, box-shadow\n      transitionDuration: '0s, 0.15s'\n    }),\n    '&:focus': _objectSpread(_objectSpread({}, getColors({\n      appearance: appearance,\n      key: isSelected ? 'focusSelected' : 'focus',\n      mode: mode\n    })), {}, {\n      boxShadow: \"0 0 0 2px \".concat(colors.boxShadowColor[appearance].focus[mode]),\n      // background, box-shadow\n      transitionDuration: '0s, 0.2s',\n      // disabling browser focus outline\n      outline: 'none'\n    }),\n    // giving active styles preference by listing them after focus\n    '&:active': _objectSpread(_objectSpread({}, getColors({\n      appearance: appearance,\n      key: isSelected ? 'selected' : 'active',\n      mode: mode\n    })), {}, {\n      // background, box-shadow\n      transitionDuration: '0s, 0s'\n    }),\n    // preventDefault prevents regular active styles from applying in Firefox\n    '&[data-firefox-is-active=\"true\"]': _objectSpread(_objectSpread({}, getColors({\n      appearance: appearance,\n      key: isSelected ? 'selected' : 'active',\n      mode: mode\n    })), {}, {\n      // background, box-shadow\n      transitionDuration: '0s, 0s'\n    }),\n    // Giving disabled styles preference over active by listing them after.\n    // Not using '&:disabled' because :disabled is not a valid state for all element types\n    // so we are targeting the attribute\n    // Attributes have the same specificity a pesudo classes so we are overriding :disabled here\n    '&[disabled]': _objectSpread(_objectSpread({}, getColors({\n      appearance: appearance,\n      key: 'disabled',\n      mode: mode\n    })), {}, {\n      cursor: 'not-allowed',\n      textDecoration: 'none'\n    }),\n    '&[data-has-overlay=\"true\"]': {\n      cursor: 'default',\n      textDecoration: 'none'\n    },\n    // disabling hover and active color changes when there is an overlay, but the button is not disabled\n    '&[data-has-overlay=\"true\"]:not([disabled]):hover, &[data-has-overlay=\"true\"]:not([disabled]):active': _objectSpread({}, getColors({\n      appearance: appearance,\n      key: isSelected ? 'selected' : 'default',\n      mode: mode\n    })),\n    '&::-moz-focus-inner': {\n      border: 0,\n      margin: 0,\n      padding: 0\n    }\n  });\n} // inline-flex child\n\nexport function getIconStyle(_ref4) {\n  var spacing = _ref4.spacing;\n  return {\n    alignSelf: 'center',\n    display: 'flex',\n    // icon size cannot grow and shrink\n    flexGrow: 0,\n    flexShrink: 0,\n    lineHeight: 0,\n    fontSize: 0,\n    userSelect: 'none',\n    margin: spacing === 'none' ? 0 : innerMargin.icon\n  };\n} // inline-flex child\n\nexport function getContentStyle(_ref5) {\n  var spacing = _ref5.spacing;\n  return {\n    margin: spacing === 'none' ? 0 : innerMargin.content,\n    // content can grow and shrink\n    flexGrow: 1,\n    flexShrink: 1,\n    // ellipsis for overflow text\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap'\n  };\n}\nexport function getFadingCss(_ref6) {\n  var hasOverlay = _ref6.hasOverlay;\n  return {\n    transition: 'opacity 0.3s',\n    opacity: hasOverlay ? 0 : 1\n  };\n}\nexport var overlayCss = {\n  // stretching to full width / height of button\n  // this is important as we need it to still block\n  // event if clicking in the button's own padding\n  position: 'absolute',\n  left: 0,\n  top: 0,\n  right: 0,\n  bottom: 0,\n  // Putting all children in the center\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport GlobalTheme from '@atlaskit/theme/components';\nimport ButtonBase from './shared/button-base';\nimport { getCss } from './shared/css';\nimport getIsOnlySingleIcon from './shared/get-is-only-single-icon';\n\nfunction noop() {}\n\nvar isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\nvar ButtonWithMode =\n/*#__PURE__*/\nReact.forwardRef(function ButtonWithMode(_ref, ref) {\n  var mode = _ref.mode,\n      _ref$onMouseDown = _ref.onMouseDown,\n      providedOnMouseDown = _ref$onMouseDown === void 0 ? noop : _ref$onMouseDown,\n      _ref$onMouseUp = _ref.onMouseUp,\n      providedOnMouseUp = _ref$onMouseUp === void 0 ? noop : _ref$onMouseUp,\n      rest = _objectWithoutProperties(_ref, [\"mode\", \"onMouseDown\", \"onMouseUp\"]);\n\n  var appearance = rest.appearance || 'default';\n  var spacing = rest.spacing || 'default';\n  var shouldFitContainer = Boolean(rest.shouldFitContainer);\n  var isSelected = Boolean(rest.isSelected);\n  var isOnlySingleIcon = getIsOnlySingleIcon(rest);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1]; // Wrap onMouseDown / onMouseUp to manually trigger active state\n  //  in Firefox\n\n\n  var onMouseDown = useCallback(function (event) {\n    providedOnMouseDown(event);\n\n    if (isFirefox) {\n      setIsActive(true);\n    }\n  }, [providedOnMouseDown, setIsActive]);\n  var onMouseUp = useCallback(function (event) {\n    providedOnMouseUp(event);\n\n    if (isFirefox) {\n      setIsActive(false);\n    }\n  }, [providedOnMouseUp, setIsActive]);\n  var buttonCss = useMemo(function () {\n    return getCss({\n      appearance: appearance,\n      spacing: spacing,\n      mode: mode,\n      isSelected: isSelected,\n      shouldFitContainer: shouldFitContainer,\n      isOnlySingleIcon: isOnlySingleIcon\n    });\n  }, [appearance, spacing, mode, isSelected, shouldFitContainer, isOnlySingleIcon]);\n  return (\n    /*#__PURE__*/\n    React.createElement(ButtonBase, _extends({}, rest, {\n      ref: ref,\n      buttonCss: buttonCss // Due to how click events are set, we need to set active styles\n      //  manually in Firefox and wrap onMouseDown/onMouseUp\n      ,\n      \"data-firefox-is-active\": isActive ? true : undefined,\n      onMouseDown: onMouseDown,\n      onMouseUp: onMouseUp\n    }))\n  );\n});\nvar Button =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function Button(props, ref) {\n  return (\n    /*#__PURE__*/\n    React.createElement(GlobalTheme.Consumer, null, function (_ref2) {\n      var mode = _ref2.mode;\n      return (\n        /*#__PURE__*/\n        React.createElement(ButtonWithMode, _extends({}, props, {\n          ref: ref,\n          mode: mode\n        }))\n      );\n    })\n  );\n})); // Tools including enzyme rely on components having a display name\n\nButton.displayName = 'Button';\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}
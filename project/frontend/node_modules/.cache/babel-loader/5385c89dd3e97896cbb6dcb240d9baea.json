{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useCallback, useState } from 'react';\nimport GlobalTheme from '@atlaskit/theme/components';\nimport ButtonBase from '../shared/button-base';\nimport getIsOnlySingleIcon from '../shared/get-is-only-single-icon';\nimport LoadingSpinner from '../shared/loading-spinner';\nimport Theme, { defaultThemeFn, getSpecifiers } from './theme';\n\nfunction getInteractionState(_ref) {\n  var _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,\n      _ref$isActive = _ref.isActive,\n      isActive = _ref$isActive === void 0 ? false : _ref$isActive,\n      _ref$isFocus = _ref.isFocus,\n      isFocus = _ref$isFocus === void 0 ? false : _ref$isFocus,\n      _ref$isHover = _ref.isHover,\n      isHover = _ref$isHover === void 0 ? false : _ref$isHover,\n      _ref$isSelected = _ref.isSelected,\n      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,\n      _ref$isLoading = _ref.isLoading,\n      isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading;\n\n  if (isDisabled) {\n    return 'disabled';\n  }\n\n  if (isSelected && isFocus) {\n    return 'focusSelected';\n  }\n\n  if (isSelected) {\n    return 'selected';\n  } // not allowing active or focus style changes while loading\n\n\n  if (!isLoading && isActive) {\n    return 'active';\n  }\n\n  if (!isLoading && isHover) {\n    return 'hover';\n  }\n\n  if (isFocus) {\n    return 'focus';\n  }\n\n  return 'default';\n}\n\nvar initial = {\n  isHover: false,\n  isActive: false,\n  isFocus: false\n};\nvar CustomThemeButton =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef(function CustomThemeButton(_ref2, ref) {\n  var _ref2$appearance = _ref2.appearance,\n      appearance = _ref2$appearance === void 0 ? 'default' : _ref2$appearance,\n      _ref2$autoFocus = _ref2.autoFocus,\n      autoFocus = _ref2$autoFocus === void 0 ? false : _ref2$autoFocus,\n      _ref2$isDisabled = _ref2.isDisabled,\n      isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled,\n      _ref2$isSelected = _ref2.isSelected,\n      isSelected = _ref2$isSelected === void 0 ? false : _ref2$isSelected,\n      _ref2$shouldFitContai = _ref2.shouldFitContainer,\n      shouldFitContainer = _ref2$shouldFitContai === void 0 ? false : _ref2$shouldFitContai,\n      _ref2$spacing = _ref2.spacing,\n      spacing = _ref2$spacing === void 0 ? 'default' : _ref2$spacing,\n      _ref2$isLoading = _ref2.isLoading,\n      isLoading = _ref2$isLoading === void 0 ? false : _ref2$isLoading,\n      providedOnMouseEnter = _ref2.onMouseEnter,\n      providedOnMouseLeave = _ref2.onMouseLeave,\n      providedOnMouseDown = _ref2.onMouseDown,\n      providedOnMouseUp = _ref2.onMouseUp,\n      providedOnFocus = _ref2.onFocus,\n      providedOnBlur = _ref2.onBlur,\n      _ref2$theme = _ref2.theme,\n      theme = _ref2$theme === void 0 ? defaultThemeFn : _ref2$theme,\n      rest = _objectWithoutProperties(_ref2, [\"appearance\", \"autoFocus\", \"isDisabled\", \"isSelected\", \"shouldFitContainer\", \"spacing\", \"isLoading\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseDown\", \"onMouseUp\", \"onFocus\", \"onBlur\", \"theme\"]); // TODO is there a nicer way to do this?\n  // Add default props back into object for spreading\n\n\n  var restProps = _objectSpread({\n    appearance: appearance,\n    autoFocus: autoFocus,\n    isDisabled: isDisabled,\n    isSelected: isSelected,\n    shouldFitContainer: shouldFitContainer,\n    spacing: spacing\n  }, rest);\n\n  var _useState = useState(initial),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var onMouseEnter = useCallback(function (event) {\n    setState(function (current) {\n      return _objectSpread(_objectSpread({}, current), {}, {\n        isHover: true\n      });\n    });\n\n    if (providedOnMouseEnter) {\n      providedOnMouseEnter(event);\n    }\n  }, [providedOnMouseEnter]);\n  var onMouseLeave = useCallback(function (event) {\n    setState(function (current) {\n      return _objectSpread(_objectSpread({}, current), {}, {\n        isHover: false,\n        isActive: false\n      });\n    });\n\n    if (providedOnMouseLeave) {\n      providedOnMouseLeave(event);\n    }\n  }, [providedOnMouseLeave]);\n  var onMouseDown = useCallback(function (event) {\n    setState(function (current) {\n      return _objectSpread(_objectSpread({}, current), {}, {\n        isActive: true\n      });\n    });\n\n    if (providedOnMouseDown) {\n      providedOnMouseDown(event);\n    }\n  }, [providedOnMouseDown]);\n  var onMouseUp = useCallback(function (event) {\n    setState(function (current) {\n      return _objectSpread(_objectSpread({}, current), {}, {\n        isActive: false\n      });\n    });\n\n    if (providedOnMouseUp) {\n      providedOnMouseUp(event);\n    }\n  }, [providedOnMouseUp]);\n  var onFocus = useCallback(function (event) {\n    setState(function (current) {\n      return _objectSpread(_objectSpread({}, current), {}, {\n        isFocus: true\n      });\n    });\n\n    if (providedOnFocus) {\n      providedOnFocus(event);\n    }\n  }, [providedOnFocus]);\n  var onBlur = useCallback(function (event) {\n    setState(function (current) {\n      return _objectSpread(_objectSpread({}, current), {}, {\n        isFocus: false\n      });\n    });\n\n    if (providedOnBlur) {\n      providedOnBlur(event);\n    }\n  }, [providedOnBlur]);\n  return (\n    /*#__PURE__*/\n    React.createElement(Theme.Provider, {\n      value: theme\n    },\n    /*#__PURE__*/\n    React.createElement(GlobalTheme.Consumer, null, function (_ref3) {\n      var mode = _ref3.mode;\n      return (\n        /*#__PURE__*/\n        React.createElement(Theme.Consumer, _extends({\n          mode: mode,\n          state: getInteractionState(_objectSpread(_objectSpread({}, state), {}, {\n            isLoading: isLoading,\n            isSelected: restProps.isSelected,\n            isDisabled: restProps.isDisabled\n          })),\n          iconIsOnlyChild: getIsOnlySingleIcon(restProps),\n          isLoading: isLoading\n        }, restProps), function (_ref4) {\n          var buttonStyles = _ref4.buttonStyles;\n          return (\n            /*#__PURE__*/\n            React.createElement(ButtonBase, _extends({}, restProps, {\n              ref: ref,\n              overlay: isLoading ?\n              /*#__PURE__*/\n              React.createElement(LoadingSpinner, restProps) : null,\n              onMouseEnter: onMouseEnter,\n              onMouseLeave: onMouseLeave,\n              onMouseDown: onMouseDown,\n              onMouseUp: onMouseUp,\n              onFocus: onFocus,\n              onBlur: onBlur,\n              buttonCss: getSpecifiers(buttonStyles)\n            }))\n          );\n        })\n      );\n    }))\n  );\n})); // Tools including enzyme rely on components having a display name\n\nCustomThemeButton.displayName = 'CustomThemeButton';\nexport default CustomThemeButton;","map":null,"metadata":{},"sourceType":"module"}
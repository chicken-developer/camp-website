import React, { ReactNode } from 'react';
import { FieldConfig, FieldSubscriber, FieldSubscription, FormState, Unsubscribe } from 'final-form';
import { OnSubmitHandler } from './types';
declare type DefaultValue<FieldValue> = (value?: FieldValue) => FieldValue;
declare type RegisterField = <FieldValue>(name: string, defaultValue: FieldValue | DefaultValue<FieldValue>, subscriber: FieldSubscriber<FieldValue>, subscription: FieldSubscription, config: FieldConfig<FieldValue>) => Unsubscribe;
export declare const FormContext: React.Context<RegisterField>;
export declare const IsDisabledContext: React.Context<boolean>;
interface FormChildrenProps {
    ref: React.RefObject<HTMLFormElement>;
    onSubmit: (event?: React.FormEvent<HTMLFormElement> | React.SyntheticEvent<HTMLElement>) => void;
    onKeyDown: (event: React.KeyboardEvent<HTMLElement>) => void;
}
export interface FormProps<FormValues> {
    children: (args: {
        formProps: FormChildrenProps;
        disabled: boolean;
        dirty: boolean;
        submitting: boolean;
        getState: () => FormState<FormValues>;
        /** @deprecated */
        getValues: () => FormValues;
        setFieldValue: (name: string, value: any) => void;
        reset: (initialValues?: FormValues) => void;
    }) => ReactNode;
    onSubmit: OnSubmitHandler<FormValues>;
    isDisabled?: boolean;
}
export default function Form<FormValues extends Record<string, any> = {}>(props: FormProps<FormValues>): JSX.Element;
export {};

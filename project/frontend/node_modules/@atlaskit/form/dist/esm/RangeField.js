import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import Field from './Field';

var RangeField = function RangeField(props) {
  var children = props.children,
      strippedProps = _objectWithoutProperties(props, ["children"]); // isInvalid and isRequired are specifically invalid for range inputs


  return /*#__PURE__*/React.createElement(Field, _extends({}, strippedProps, {
    transform: Number
  }), function (_ref) {
    var _ref$fieldProps = _ref.fieldProps,
        isInvalid = _ref$fieldProps.isInvalid,
        isRequired = _ref$fieldProps.isRequired,
        fieldProps = _objectWithoutProperties(_ref$fieldProps, ["isInvalid", "isRequired"]),
        rest = _objectWithoutProperties(_ref, ["fieldProps"]);

    return children(_objectSpread({
      fieldProps: fieldProps
    }, rest));
  });
};

export default RangeField;
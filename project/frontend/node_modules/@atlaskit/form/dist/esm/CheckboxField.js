import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useCallback } from 'react';
import Field from './Field';

var CheckboxField = function CheckboxField(props) {
  var children = props.children,
      _props$defaultIsCheck = props.defaultIsChecked,
      defaultIsChecked = _props$defaultIsCheck === void 0 ? false : _props$defaultIsCheck,
      value = props.value,
      rest = _objectWithoutProperties(props, ["children", "defaultIsChecked", "value"]); // Maintains a memoised list of the default values


  var defaultValue = useCallback(function () {
    var currentValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return defaultIsChecked && value !== undefined ? [].concat(_toConsumableArray(currentValue), [value]) : currentValue;
  }, [value, defaultIsChecked]);
  return value !== undefined ? /*#__PURE__*/React.createElement(Field, _extends({}, rest, {
    defaultValue: defaultValue,
    transform: function transform(event, currentValue) {
      return event.currentTarget.checked && currentValue ? [].concat(_toConsumableArray(currentValue), [value]) : currentValue.filter(function (v) {
        return v !== value;
      });
    }
  }), function (_ref) {
    var _ref$fieldProps = _ref.fieldProps,
        fieldValue = _ref$fieldProps.value,
        otherFieldProps = _objectWithoutProperties(_ref$fieldProps, ["value"]),
        others = _objectWithoutProperties(_ref, ["fieldProps"]);

    return children(_objectSpread({
      fieldProps: _objectSpread(_objectSpread({}, otherFieldProps), {}, {
        isChecked: !!fieldValue.find(function (v) {
          return v === value;
        }),
        value: value
      })
    }, others));
  }) : /*#__PURE__*/React.createElement(Field, _extends({}, rest, {
    defaultValue: defaultIsChecked,
    transform: function transform(event) {
      return event.currentTarget.checked;
    }
  }), function (_ref2) {
    var _ref2$fieldProps = _ref2.fieldProps,
        fieldValue = _ref2$fieldProps.value,
        otherFieldProps = _objectWithoutProperties(_ref2$fieldProps, ["value"]),
        others = _objectWithoutProperties(_ref2, ["fieldProps"]);

    return children(_objectSpread({
      fieldProps: _objectSpread(_objectSpread({}, otherFieldProps), {}, {
        isChecked: fieldValue,
        value: value
      })
    }, others));
  });
};

CheckboxField.defaultProps = {
  defaultIsChecked: false
};
export default CheckboxField;
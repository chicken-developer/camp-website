import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { createContext, useCallback, useEffect, useRef, useState } from 'react';
import { createForm } from 'final-form';
import createDecorator from 'final-form-focus';
import set from 'lodash/set';
export var FormContext = /*#__PURE__*/createContext(function () {
  return function () {};
});
export var IsDisabledContext = /*#__PURE__*/createContext(false);
export default function Form(props) {
  var formRef = useRef(null);
  var onSubmitRef = useRef(props.onSubmit);
  onSubmitRef.current = props.onSubmit;

  var _useState = useState(function () {
    // Types here would break the existing API
    var finalForm = createForm({
      onSubmit: function onSubmit() {
        return onSubmitRef.current.apply(onSubmitRef, arguments);
      },
      destroyOnUnregister: true,
      initialValues: {},
      mutators: {
        setDefaultValue: function setDefaultValue(_ref, state) {
          var _ref2 = _slicedToArray(_ref, 2),
              name = _ref2[0],
              defaultValue = _ref2[1];

          if (state.formState.initialValues) {
            var _initialValues = state.formState.initialValues;
            var values = state.formState.values;

            var _value = name && typeof defaultValue === 'function' ? defaultValue(_initialValues[name]) : defaultValue;
            /* eslint-disable no-param-reassign */


            /* eslint-disable no-param-reassign */
            set(_initialValues, name, _value);
            set(values, name, _value);
            /* eslint-enable */
          }
        }
      }
    });
    createDecorator(function () {
      return formRef.current ? Array.from(formRef.current.querySelectorAll('input')) : [];
    })(finalForm);
    return finalForm;
  }),
      _useState2 = _slicedToArray(_useState, 1),
      form = _useState2[0];

  var _useState3 = useState({
    dirty: false,
    submitting: false
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      state = _useState4[0],
      setState = _useState4[1];

  useEffect(function () {
    var unsubscribe = form.subscribe(function (_ref3) {
      var dirty = _ref3.dirty,
          submitting = _ref3.submitting;
      setState({
        dirty: dirty,
        submitting: submitting
      });
    }, {
      dirty: true,
      submitting: true
    });
    return unsubscribe;
  }, [form]);
  var registerField = useCallback(function (name, defaultValue, subscriber, subscription, config) {
    form.pauseValidation();
    var unsubscribe = form.registerField(name, subscriber, subscription, config);
    form.mutators.setDefaultValue(name, defaultValue);
    form.resumeValidation();
    return unsubscribe;
  }, [form]);

  var handleSubmit = function handleSubmit(e) {
    if (e) {
      e.preventDefault();
    }

    form.submit();
  };

  var handleReset = function handleReset(initialValues) {
    form.reset(initialValues);
  };

  var handleKeyDown = function handleKeyDown(e) {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && formRef.current) {
      var submitButton = formRef.current.querySelector('button:not([type]), button[type="submit"], input[type="submit"]');

      if (submitButton) {
        submitButton.click();
      }

      e.preventDefault();
    }
  };

  var _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      children = props.children;
  var dirty = state.dirty,
      submitting = state.submitting;
  return /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: registerField
  }, /*#__PURE__*/React.createElement(IsDisabledContext.Provider, {
    value: isDisabled
  }, children({
    formProps: {
      onSubmit: handleSubmit,
      ref: formRef,
      onKeyDown: handleKeyDown
    },
    dirty: dirty,
    reset: handleReset,
    submitting: submitting,
    disabled: isDisabled,
    getState: function getState() {
      return form.getState();
    },
    getValues: function getValues() {
      return form.getState().values;
    },
    // TODO: deprecate
    setFieldValue: form.change
  })));
}
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2;

import React from 'react';
import styled from 'styled-components';
import SuccessIcon from '@atlaskit/icon/glyph/editor/success';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import { G400, N200, R400 } from '@atlaskit/theme/colors';
import { fontFamily, gridSize } from '@atlaskit/theme/constants';
import { multiply } from '@atlaskit/theme/math';
import { h200 } from '@atlaskit/theme/typography';
import { FieldId } from './Field';
var Message = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", " font-weight: normal;\n  font-family: ", ";\n  color: ", ";\n  margin-top: ", "px;\n  display: flex;\n  justify-content: baseline;\n"])), h200, fontFamily(), function (props) {
  if (props.error) {
    return R400;
  }

  if (props.valid) {
    return G400;
  }

  return N200;
}, multiply(gridSize, 0.5));
var IconWrapper = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n"])));
export var HelperMessage = function HelperMessage(_ref) {
  var children = _ref.children,
      testId = _ref.testId;
  return /*#__PURE__*/React.createElement(FieldId.Consumer, null, function (fieldId) {
    return /*#__PURE__*/React.createElement(Message, {
      id: fieldId ? "".concat(fieldId, "-helper") : undefined,
      "data-testid": testId
    }, children);
  });
};
export var ErrorMessage = function ErrorMessage(_ref2) {
  var children = _ref2.children,
      testId = _ref2.testId;
  return /*#__PURE__*/React.createElement(FieldId.Consumer, null, function (fieldId) {
    return /*#__PURE__*/React.createElement(Message, {
      error: true,
      id: fieldId ? "".concat(fieldId, "-error") : undefined,
      "data-testid": testId
    }, /*#__PURE__*/React.createElement(IconWrapper, null, /*#__PURE__*/React.createElement(ErrorIcon, {
      size: "small",
      label: "error"
    })), children);
  });
};
export var ValidMessage = function ValidMessage(_ref3) {
  var children = _ref3.children,
      testId = _ref3.testId;
  return /*#__PURE__*/React.createElement(FieldId.Consumer, null, function (fieldId) {
    return /*#__PURE__*/React.createElement(Message, {
      valid: true,
      id: fieldId ? "".concat(fieldId, "-valid") : undefined,
      "data-testid": testId
    }, /*#__PURE__*/React.createElement(IconWrapper, null, /*#__PURE__*/React.createElement(SuccessIcon, {
      size: "small",
      label: "success"
    })), children);
  });
};
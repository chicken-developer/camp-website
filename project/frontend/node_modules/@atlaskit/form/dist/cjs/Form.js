"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Form;
exports.IsDisabledContext = exports.FormContext = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _finalForm = require("final-form");

var _finalFormFocus = _interopRequireDefault(require("final-form-focus"));

var _set = _interopRequireDefault(require("lodash/set"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var FormContext = /*#__PURE__*/(0, _react.createContext)(function () {
  return function () {};
});
exports.FormContext = FormContext;
var IsDisabledContext = /*#__PURE__*/(0, _react.createContext)(false);
exports.IsDisabledContext = IsDisabledContext;

function Form(props) {
  var formRef = (0, _react.useRef)(null);
  var onSubmitRef = (0, _react.useRef)(props.onSubmit);
  onSubmitRef.current = props.onSubmit;

  var _useState = (0, _react.useState)(function () {
    // Types here would break the existing API
    var finalForm = (0, _finalForm.createForm)({
      onSubmit: function onSubmit() {
        return onSubmitRef.current.apply(onSubmitRef, arguments);
      },
      destroyOnUnregister: true,
      initialValues: {},
      mutators: {
        setDefaultValue: function setDefaultValue(_ref, state) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              name = _ref2[0],
              defaultValue = _ref2[1];

          if (state.formState.initialValues) {
            var _initialValues = state.formState.initialValues;
            var values = state.formState.values;

            var _value = name && typeof defaultValue === 'function' ? defaultValue(_initialValues[name]) : defaultValue;
            /* eslint-disable no-param-reassign */


            /* eslint-disable no-param-reassign */
            (0, _set.default)(_initialValues, name, _value);
            (0, _set.default)(values, name, _value);
            /* eslint-enable */
          }
        }
      }
    });
    (0, _finalFormFocus.default)(function () {
      return formRef.current ? Array.from(formRef.current.querySelectorAll('input')) : [];
    })(finalForm);
    return finalForm;
  }),
      _useState2 = (0, _slicedToArray2.default)(_useState, 1),
      form = _useState2[0];

  var _useState3 = (0, _react.useState)({
    dirty: false,
    submitting: false
  }),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      state = _useState4[0],
      setState = _useState4[1];

  (0, _react.useEffect)(function () {
    var unsubscribe = form.subscribe(function (_ref3) {
      var dirty = _ref3.dirty,
          submitting = _ref3.submitting;
      setState({
        dirty: dirty,
        submitting: submitting
      });
    }, {
      dirty: true,
      submitting: true
    });
    return unsubscribe;
  }, [form]);
  var registerField = (0, _react.useCallback)(function (name, defaultValue, subscriber, subscription, config) {
    form.pauseValidation();
    var unsubscribe = form.registerField(name, subscriber, subscription, config);
    form.mutators.setDefaultValue(name, defaultValue);
    form.resumeValidation();
    return unsubscribe;
  }, [form]);

  var handleSubmit = function handleSubmit(e) {
    if (e) {
      e.preventDefault();
    }

    form.submit();
  };

  var handleReset = function handleReset(initialValues) {
    form.reset(initialValues);
  };

  var handleKeyDown = function handleKeyDown(e) {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && formRef.current) {
      var submitButton = formRef.current.querySelector('button:not([type]), button[type="submit"], input[type="submit"]');

      if (submitButton) {
        submitButton.click();
      }

      e.preventDefault();
    }
  };

  var _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      children = props.children;
  var dirty = state.dirty,
      submitting = state.submitting;
  return /*#__PURE__*/_react.default.createElement(FormContext.Provider, {
    value: registerField
  }, /*#__PURE__*/_react.default.createElement(IsDisabledContext.Provider, {
    value: isDisabled
  }, children({
    formProps: {
      onSubmit: handleSubmit,
      ref: formRef,
      onKeyDown: handleKeyDown
    },
    dirty: dirty,
    reset: handleReset,
    submitting: submitting,
    disabled: isDisabled,
    getState: function getState() {
      return form.getState();
    },
    getValues: function getValues() {
      return form.getState().values;
    },
    // TODO: deprecate
    setFieldValue: form.change
  })));
}
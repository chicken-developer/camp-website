/** @jsx jsx */
import React, { useMemo } from 'react';
import { jsx } from '@emotion/core';
import ErrorIcon from '@atlaskit/icon/glyph/error';
import WarningIcon from '@atlaskit/icon/glyph/warning';
import { getTitleIconStyles, getTitleTextStyles, headerStyles, titleStyles } from '../styles/content';

var TitleIcon = function TitleIcon(_ref) {
  var appearance = _ref.appearance,
      isHeadingMultiline = _ref.isHeadingMultiline;
  var titleIconStyles = useMemo(function () {
    return getTitleIconStyles({
      appearance: appearance,
      isHeadingMultiline: isHeadingMultiline
    });
  }, [appearance, isHeadingMultiline]);
  var Icon = appearance === 'danger' ? ErrorIcon : WarningIcon;
  return jsx("span", {
    css: titleIconStyles
  }, jsx(Icon, {
    label: "".concat(appearance, " icon")
  }));
};

export default function ModalHeader(props) {
  var id = props.id,
      appearance = props.appearance,
      component = props.component,
      heading = props.heading,
      onClose = props.onClose,
      testId = props.testId,
      _props$isHeadingMulti = props.isHeadingMultiline,
      isHeadingMultiline = _props$isHeadingMulti === void 0 ? true : _props$isHeadingMulti;
  var warning = 'You can provide `component` OR `heading`, not both.';
  var titleTextStyles = useMemo(function () {
    return getTitleTextStyles(isHeadingMultiline);
  }, [isHeadingMultiline]);

  if (!component && !heading) {
    return null;
  }

  if (component && heading) {
    console.warn(warning); // eslint-disable-line no-console

    return null;
  }

  if (component) {
    return /*#__PURE__*/React.createElement(component, {
      id: id,
      testId: testId,
      appearance: appearance,
      onClose: onClose,
      isHeadingMultiline: isHeadingMultiline
    });
  }

  return jsx("div", {
    css: headerStyles,
    "data-testid": testId && "".concat(testId, "--header")
  }, jsx("h1", {
    css: titleStyles
  }, appearance && jsx(TitleIcon, {
    appearance: appearance,
    isHeadingMultiline: isHeadingMultiline
  }), jsx("span", {
    id: id,
    css: titleTextStyles,
    "data-testid": testId && "".concat(testId, "-heading")
  }, heading)));
}
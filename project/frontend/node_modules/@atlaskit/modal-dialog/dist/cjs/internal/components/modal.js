"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _core = require("@emotion/core");

var _reactFocusLock = _interopRequireDefault(require("react-focus-lock"));

var _reactUid = require("react-uid");

var _analyticsNext = require("@atlaskit/analytics-next");

var _blanket = _interopRequireDefault(require("@atlaskit/blanket"));

var _mergeRefs = _interopRequireDefault(require("@atlaskit/ds-lib/merge-refs"));

var _useAutoFocus = _interopRequireDefault(require("@atlaskit/ds-lib/use-auto-focus"));

var _useCloseOnEscapePress = _interopRequireDefault(require("@atlaskit/ds-lib/use-close-on-escape-press"));

var _fadeIn = _interopRequireDefault(require("@atlaskit/motion/fade-in"));

var _useOnMotionFinish3 = _interopRequireDefault(require("../hooks/use-on-motion-finish"));

var _usePreventProgrammaticScroll = _interopRequireDefault(require("../hooks/use-prevent-programmatic-scroll"));

var _modal = require("../styles/modal");

var _content = _interopRequireDefault(require("./content"));

var _positioner = _interopRequireDefault(require("./positioner"));

/** @jsx jsx */
function ModalDialogInner(props) {
  var actions = props.actions,
      appearance = props.appearance,
      autoFocus = props.autoFocus,
      body = props.body,
      children = props.children,
      components = props.components,
      footer = props.footer,
      header = props.header,
      height = props.height,
      isBlanketHidden = props.isBlanketHidden,
      isChromeless = props.isChromeless,
      isHeadingMultiline = props.isHeadingMultiline,
      onClose = props.onClose,
      onCloseComplete = props.onCloseComplete,
      onOpenComplete = props.onOpenComplete,
      shouldCloseOnEscapePress = props.shouldCloseOnEscapePress,
      shouldCloseOnOverlayClick = props.shouldCloseOnOverlayClick,
      stackIndex = props.stackIndex,
      heading = props.heading,
      width = props.width,
      scrollBehavior = props.scrollBehavior,
      testId = props.testId;
  var id = (0, _reactUid.useUID)();
  var scrollDistance = (0, _usePreventProgrammaticScroll.default)();
  var isForeground = stackIndex === 0;
  var onCloseHandler = (0, _analyticsNext.usePlatformLeafEventHandler)({
    fn: onClose,
    action: 'closed',
    componentName: 'modalDialog',
    packageName: "@atlaskit/modal-dialog",
    packageVersion: "11.7.2"
  });
  (0, _useCloseOnEscapePress.default)({
    onClose: onCloseHandler,
    isDisabled: !shouldCloseOnEscapePress || !isForeground
  });

  var _useOnMotionFinish = (0, _useOnMotionFinish3.default)({
    onOpenComplete: onOpenComplete,
    onCloseComplete: onCloseComplete
  }),
      _useOnMotionFinish2 = (0, _slicedToArray2.default)(_useOnMotionFinish, 2),
      motionRef = _useOnMotionFinish2[0],
      onMotionFinish = _useOnMotionFinish2[1];

  var onBlanketClicked = (0, _react.useCallback)(function (e) {
    if (shouldCloseOnOverlayClick) {
      onCloseHandler(e);
    }
  }, [shouldCloseOnOverlayClick, onCloseHandler]);
  (0, _useAutoFocus.default)((0, _typeof2.default)(autoFocus) === 'object' ? autoFocus : undefined, // When a user supplies  a ref to focus we enable this hook
  (0, _typeof2.default)(autoFocus) === 'object');
  var fillScreenStyles = (0, _react.useMemo)(function () {
    return (0, _modal.getFillScreenStyles)(scrollDistance);
  }, [scrollDistance]);
  var dialogStyles = (0, _react.useMemo)(function () {
    return (0, _modal.getDialogStyles)({
      isChromeless: isChromeless,
      height: height,
      width: width
    });
  }, [isChromeless, height, width]);
  return (0, _core.jsx)(_fadeIn.default, null, function (fadeInProps) {
    return (0, _core.jsx)("div", (0, _extends2.default)({}, fadeInProps, {
      css: fillScreenStyles,
      "aria-hidden": !isForeground
    }), (0, _core.jsx)(_reactFocusLock.default, {
      autoFocus: // When a user supplies a ref to focus we skip focusing automatically
      typeof autoFocus === 'boolean' ? autoFocus : false,
      disabled: !isForeground,
      returnFocus: true
    }, (0, _core.jsx)(_blanket.default, {
      isTinted: !isBlanketHidden,
      onBlanketClicked: onBlanketClicked,
      testId: testId && "".concat(testId, "--blanket")
    }), (0, _core.jsx)(_positioner.default, {
      scrollBehavior: scrollBehavior,
      stackIndex: stackIndex,
      testId: testId
    }, (0, _core.jsx)(_fadeIn.default, {
      entranceDirection: "bottom",
      onFinish: onMotionFinish
    }, function (bottomFadeInProps) {
      return (0, _core.jsx)("section", (0, _extends2.default)({}, bottomFadeInProps, {
        ref: (0, _mergeRefs.default)([bottomFadeInProps.ref, motionRef]),
        css: dialogStyles,
        role: "dialog",
        "aria-labelledby": "dialog-heading-".concat(id),
        "data-testid": testId,
        tabIndex: -1,
        "aria-modal": true
      }), (0, _core.jsx)(_content.default, {
        actions: actions,
        appearance: appearance,
        components: components,
        header: header,
        body: body,
        footer: footer,
        heading: heading,
        headingId: "dialog-heading-".concat(id),
        testId: testId && "".concat(testId, "-dialog-content"),
        isChromeless: isChromeless,
        isHeadingMultiline: isHeadingMultiline,
        onClose: onCloseHandler,
        stackIndex: stackIndex,
        shouldScroll: scrollBehavior === 'inside' || scrollBehavior === 'inside-wide'
      }, children));
    }))));
  });
}

var _default = ModalDialogInner;
exports.default = _default;
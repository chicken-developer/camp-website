"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Content;

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _reactScrolllock = _interopRequireDefault(require("react-scrolllock"));

var _warnOnce = _interopRequireDefault(require("@atlaskit/ds-lib/warn-once"));

var _content = require("../styles/content");

var _footer = _interopRequireDefault(require("./footer"));

var _header = _interopRequireDefault(require("./header"));

var _scrollContainer = _interopRequireDefault(require("./scroll-container"));

/** @jsx jsx */
var emptyObject = {};

function Content(props) {
  var actions = props.actions,
      appearance = props.appearance,
      DeprecatedBody = props.body,
      children = props.children,
      _props$components = props.components,
      components = _props$components === void 0 ? emptyObject : _props$components,
      footer = props.footer,
      header = props.header,
      heading = props.heading,
      isChromeless = props.isChromeless,
      isHeadingMultiline = props.isHeadingMultiline,
      onClose = props.onClose,
      shouldScroll = props.shouldScroll,
      testId = props.testId,
      headingId = props.headingId,
      stackIndex = props.stackIndex;
  var _components$Container = components.Container,
      Container = _components$Container === void 0 ? 'div' : _components$Container,
      CustomBody = components.Body;
  var Body = CustomBody || DeprecatedBody || 'div';

  if (process.env.NODE_ENV !== 'production') {
    if (header) {
      (0, _warnOnce.default)("@atlaskit/modal-dialog: Deprecation warning - Use of the header prop in ModalDialog is deprecated. Please compose your ModalDialog using the 'components' prop instead");
    }

    if (footer) {
      (0, _warnOnce.default)("@atlaskit/modal-dialog: Deprecation warning - Use of the footer prop in ModalDialog is deprecated. Please compose your ModalDialog using the 'components' prop instead");
    }

    if (DeprecatedBody) {
      (0, _warnOnce.default)("@atlaskit/modal-dialog: Deprecation warning - Use of the body prop in ModalDialog is deprecated. Please compose your ModalDialog using the 'components' prop instead");
    }
  }

  return (0, _core.jsx)(Container, {
    css: _content.wrapperStyles,
    "data-modal-stack": stackIndex,
    "data-testid": testId
  }, isChromeless ? children : (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_header.default, {
    id: headingId,
    appearance: appearance,
    component: components.Header ? components.Header : header,
    heading: heading,
    onClose: onClose,
    isHeadingMultiline: isHeadingMultiline,
    testId: testId
  }), (0, _core.jsx)(_reactScrolllock.default, null, (0, _core.jsx)(_scrollContainer.default, {
    shouldScroll: shouldScroll,
    testId: testId
  }, (0, _core.jsx)(Body, {
    css: _content.bodyStyles,
    "data-testid": testId && "".concat(testId, "--body")
  }, children))), (0, _core.jsx)(_footer.default, {
    actions: actions,
    appearance: appearance,
    component: components.Footer ? components.Footer : footer,
    onClose: onClose,
    testId: testId
  })));
}
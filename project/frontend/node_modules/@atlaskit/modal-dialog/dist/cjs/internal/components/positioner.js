"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _modal = require("../styles/modal");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** @jsx jsx */
var Positioner = function Positioner(_ref) {
  var scrollBehavior = _ref.scrollBehavior,
      stackIndex = _ref.stackIndex,
      children = _ref.children,
      testId = _ref.testId;
  var positionerStyles = (0, _react.useMemo)(function () {
    switch (scrollBehavior) {
      case 'outside':
        return (0, _modal.getPositionRelativeStyles)(stackIndex);

      case 'inside-wide':
        return (0, _modal.getPositionFixedStyles)(stackIndex);

      default:
        return (0, _modal.getPositionAbsoluteStyles)(stackIndex);
    }
  }, [scrollBehavior, stackIndex]);
  return (0, _core.jsx)("div", {
    css: positionerStyles,
    "data-testid": testId && "".concat(testId, "--positioner")
  }, children);
};

Positioner.displayName = 'Positioner';
var _default = Positioner;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ModalHeader;

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _error = _interopRequireDefault(require("@atlaskit/icon/glyph/error"));

var _warning = _interopRequireDefault(require("@atlaskit/icon/glyph/warning"));

var _content = require("../styles/content");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** @jsx jsx */
var TitleIcon = function TitleIcon(_ref) {
  var appearance = _ref.appearance,
      isHeadingMultiline = _ref.isHeadingMultiline;
  var titleIconStyles = (0, _react.useMemo)(function () {
    return (0, _content.getTitleIconStyles)({
      appearance: appearance,
      isHeadingMultiline: isHeadingMultiline
    });
  }, [appearance, isHeadingMultiline]);
  var Icon = appearance === 'danger' ? _error.default : _warning.default;
  return (0, _core.jsx)("span", {
    css: titleIconStyles
  }, (0, _core.jsx)(Icon, {
    label: "".concat(appearance, " icon")
  }));
};

function ModalHeader(props) {
  var id = props.id,
      appearance = props.appearance,
      component = props.component,
      heading = props.heading,
      onClose = props.onClose,
      testId = props.testId,
      _props$isHeadingMulti = props.isHeadingMultiline,
      isHeadingMultiline = _props$isHeadingMulti === void 0 ? true : _props$isHeadingMulti;
  var warning = 'You can provide `component` OR `heading`, not both.';
  var titleTextStyles = (0, _react.useMemo)(function () {
    return (0, _content.getTitleTextStyles)(isHeadingMultiline);
  }, [isHeadingMultiline]);

  if (!component && !heading) {
    return null;
  }

  if (component && heading) {
    console.warn(warning); // eslint-disable-line no-console

    return null;
  }

  if (component) {
    return /*#__PURE__*/_react.default.createElement(component, {
      id: id,
      testId: testId,
      appearance: appearance,
      onClose: onClose,
      isHeadingMultiline: isHeadingMultiline
    });
  }

  return (0, _core.jsx)("div", {
    css: _content.headerStyles,
    "data-testid": testId && "".concat(testId, "--header")
  }, (0, _core.jsx)("h1", {
    css: _content.titleStyles
  }, appearance && (0, _core.jsx)(TitleIcon, {
    appearance: appearance,
    isHeadingMultiline: isHeadingMultiline
  }), (0, _core.jsx)("span", {
    id: id,
    css: titleTextStyles,
    "data-testid": testId && "".concat(testId, "-heading")
  }, heading)));
}